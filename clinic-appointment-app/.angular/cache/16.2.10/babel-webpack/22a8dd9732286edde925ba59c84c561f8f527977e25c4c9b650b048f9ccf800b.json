{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"../doctor/doctor.service\";\nimport * as i2 from \"@angular/router\";\nimport * as i3 from \"./patient.service\";\nimport * as i4 from \"@angular/common\";\nimport * as i5 from \"@angular/forms\";\nfunction PatientComponent_tr_17_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r6 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"tr\")(1, \"td\");\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"td\");\n    i0.ɵɵtext(4);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(5, \"td\");\n    i0.ɵɵtext(6);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(7, \"td\")(8, \"button\", 8);\n    i0.ɵɵlistener(\"click\", function PatientComponent_tr_17_Template_button_click_8_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r6);\n      const appointment_r4 = restoredCtx.$implicit;\n      const ctx_r5 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r5.editAppointment(appointment_r4));\n    });\n    i0.ɵɵtext(9, \"Edit\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(10, \"button\", 8);\n    i0.ɵɵlistener(\"click\", function PatientComponent_tr_17_Template_button_click_10_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r6);\n      const appointment_r4 = restoredCtx.$implicit;\n      const ctx_r7 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r7.cancelAppointment(appointment_r4));\n    });\n    i0.ɵɵtext(11, \"Cancel\");\n    i0.ɵɵelementEnd()()();\n  }\n  if (rf & 2) {\n    const appointment_r4 = ctx.$implicit;\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(appointment_r4.date);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(appointment_r4.time);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(appointment_r4.doctorName);\n  }\n}\nfunction PatientComponent_div_18_option_8_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"option\", 12);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const doctor_r10 = ctx.$implicit;\n    i0.ɵɵproperty(\"ngValue\", doctor_r10);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(doctor_r10.name);\n  }\n}\nfunction PatientComponent_div_18_div_9_option_4_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"option\", 12);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const slot_r12 = ctx.$implicit;\n    i0.ɵɵproperty(\"ngValue\", slot_r12);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate2(\"\", slot_r12.date, \" - \", slot_r12.time, \"\");\n  }\n}\nfunction PatientComponent_div_18_div_9_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r14 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"div\", 3)(1, \"label\", 13);\n    i0.ɵɵtext(2, \"Select Slot:\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"select\", 14);\n    i0.ɵɵlistener(\"ngModelChange\", function PatientComponent_div_18_div_9_Template_select_ngModelChange_3_listener($event) {\n      i0.ɵɵrestoreView(_r14);\n      const ctx_r13 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r13.editedSlot = $event);\n    });\n    i0.ɵɵtemplate(4, PatientComponent_div_18_div_9_option_4_Template, 2, 3, \"option\", 6);\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const ctx_r9 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(3);\n    i0.ɵɵproperty(\"ngModel\", ctx_r9.editedSlot);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r9.editedAvailableSlots);\n  }\n}\nfunction PatientComponent_div_18_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r16 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"div\")(1, \"h3\");\n    i0.ɵɵtext(2, \"Edit Appointment\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"form\")(4, \"div\", 3)(5, \"label\", 9);\n    i0.ɵɵtext(6, \"Select Doctor:\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(7, \"select\", 10);\n    i0.ɵɵlistener(\"ngModelChange\", function PatientComponent_div_18_Template_select_ngModelChange_7_listener($event) {\n      i0.ɵɵrestoreView(_r16);\n      const ctx_r15 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r15.editedDoctor = $event);\n    })(\"change\", function PatientComponent_div_18_Template_select_change_7_listener() {\n      i0.ɵɵrestoreView(_r16);\n      const ctx_r17 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r17.loadDoctorSlots(true));\n    });\n    i0.ɵɵtemplate(8, PatientComponent_div_18_option_8_Template, 2, 2, \"option\", 6);\n    i0.ɵɵelementEnd()();\n    i0.ɵɵtemplate(9, PatientComponent_div_18_div_9_Template, 5, 2, \"div\", 7);\n    i0.ɵɵelementStart(10, \"button\", 11);\n    i0.ɵɵlistener(\"click\", function PatientComponent_div_18_Template_button_click_10_listener() {\n      i0.ɵɵrestoreView(_r16);\n      const ctx_r18 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r18.saveEditedAppointment());\n    });\n    i0.ɵɵtext(11, \"Save\");\n    i0.ɵɵelementEnd()()();\n  }\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(7);\n    i0.ɵɵproperty(\"ngModel\", ctx_r1.editedDoctor);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r1.doctors);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r1.editedDoctor);\n  }\n}\nfunction PatientComponent_option_23_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"option\", 12);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const doctor_r19 = ctx.$implicit;\n    i0.ɵɵproperty(\"ngValue\", doctor_r19);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(doctor_r19.name);\n  }\n}\nfunction PatientComponent_div_24_option_4_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"option\", 12);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const slot_r21 = ctx.$implicit;\n    i0.ɵɵproperty(\"ngValue\", slot_r21);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate2(\"\", slot_r21.date, \" - \", slot_r21.time, \"\");\n  }\n}\nfunction PatientComponent_div_24_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r23 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"div\", 3)(1, \"label\", 15);\n    i0.ɵɵtext(2, \"Select Slot:\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"select\", 16);\n    i0.ɵɵlistener(\"ngModelChange\", function PatientComponent_div_24_Template_select_ngModelChange_3_listener($event) {\n      i0.ɵɵrestoreView(_r23);\n      const ctx_r22 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r22.selectedSlot = $event);\n    });\n    i0.ɵɵtemplate(4, PatientComponent_div_24_option_4_Template, 2, 3, \"option\", 6);\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const ctx_r3 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(3);\n    i0.ɵɵproperty(\"ngModel\", ctx_r3.selectedSlot);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r3.availableSlots);\n  }\n}\nexport class PatientComponent {\n  constructor(doctorService, route, patientService) {\n    this.doctorService = doctorService;\n    this.route = route;\n    this.patientService = patientService;\n    this.doctors = [];\n    this.appointments = [];\n    this.newAppointment = {\n      date: '',\n      time: ''\n    };\n    this.availableSlots = [];\n    this.editedAppointment = null;\n    this.editedAvailableSlots = [];\n    this.loadDoctors();\n    this.route.params.subscribe(params => {\n      this.patientID = params['id'];\n    });\n    console.log(this.patientID);\n  }\n  ngOnInit() {\n    this.loadPatientSlots();\n  }\n  loadDoctors() {\n    this.doctorService.getDoctors().subscribe(doctors => {\n      this.doctors = doctors;\n      console.log('Doctors:', this.doctors);\n    });\n  }\n  loadDoctorSlots(isEditing) {\n    const selectedDoctor = isEditing ? this.editedDoctor : this.selectedDoctor;\n    if (selectedDoctor) {\n      this.doctorService.getDoctorSlots(selectedDoctor._id).subscribe(slots => {\n        if (isEditing) {\n          this.editedAvailableSlots = slots;\n        } else {\n          this.availableSlots = slots;\n        }\n      });\n    }\n  }\n  loadPatientSlots() {\n    console.log(this.patientID);\n    this.patientService.viewPatientSlots(this.patientID).subscribe(slots => {\n      this.appointments = slots;\n      console.log(this.appointments);\n    });\n  }\n  cancelAppointment(appointment) {\n    const slotId = appointment.slotID;\n    console.log(slotId);\n    this.patientService.deleteSlot(slotId).subscribe(response => {\n      console.log('Slot canceled successfully:', response);\n      this.loadPatientSlots();\n    }, error => {\n      console.error('Error canceling slot:', error);\n    });\n  }\n  editAppointment(appointment) {}\n  saveEditedAppointment() {\n    console.log(\"old slot \", this.editedAppointment.slotId);\n    console.log(\"new slot id\", this.editedSlot.id);\n    console.log(\"patient id \", this.patientID);\n    // Assuming you have the necessary data to call updateReservedSlot\n    const oldSlotId = this.editedAppointment.slotId; // Replace with the actual property in your data\n    const newSlotId = this.editedSlot.id; // Replace with the actual property in your data\n    const patientId = this.patientID; // Replace with the actual property in your data\n    // Call the service to update the reserved slot\n    this.patientService.updateReservedSlot(oldSlotId, newSlotId, patientId).subscribe(() => {\n      // Update the appointment in your local array\n      const index = this.appointments.findIndex(appointment => appointment.id === this.editedAppointment.id);\n      if (index !== -1) {\n        this.appointments[index] = {\n          ...this.editedAppointment\n        };\n        this.editedAppointment = null;\n      }\n      // Handle success if needed\n    }, error => {\n      // Handle error if needed\n      console.error('Error updating reserved slot:', error);\n    });\n  }\n  formatTime(time) {\n    const options = {\n      hour: 'numeric',\n      minute: 'numeric',\n      hour12: true\n    };\n    return new Intl.DateTimeFormat('en-US', options).format(time);\n  }\n  parseTimeString(timeString) {\n    const [hoursStr, minutesStr] = timeString.split(':');\n    const hours = parseInt(hoursStr, 10);\n    const minutes = parseInt(minutesStr, 10);\n    if (isNaN(hours) || isNaN(minutes)) {\n      console.error('Invalid time format. Please enter a valid time.');\n      return null;\n    }\n    const date = new Date();\n    date.setHours(hours, minutes, 0, 0);\n    return date;\n  }\n  reserveAppointment() {\n    console.log(\"inside the reserve\");\n    console.log(this.selectedSlot.id);\n    console.log(this.patientID);\n    this.patientService.reserveSlot(this.selectedSlot.id, this.patientID).subscribe(reservationResponse => {\n      this.loadPatientSlots();\n      console.log('Slot reserved successfully:', reservationResponse);\n    }, reservationError => {\n      console.error('Error reserving slot:', reservationError);\n    });\n  }\n  static #_ = this.ɵfac = function PatientComponent_Factory(t) {\n    return new (t || PatientComponent)(i0.ɵɵdirectiveInject(i1.DoctorService), i0.ɵɵdirectiveInject(i2.ActivatedRoute), i0.ɵɵdirectiveInject(i3.PatientService));\n  };\n  static #_2 = this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: PatientComponent,\n    selectors: [[\"app-patient\"]],\n    decls: 27,\n    vars: 5,\n    consts: [[1, \"patient-container\"], [4, \"ngFor\", \"ngForOf\"], [4, \"ngIf\"], [1, \"form-group\"], [\"for\", \"reserveDoctor\"], [\"id\", \"reserveDoctor\", \"name\", \"reserveDoctor\", \"required\", \"\", 3, \"ngModel\", \"ngModelChange\", \"change\"], [3, \"ngValue\", 4, \"ngFor\", \"ngForOf\"], [\"class\", \"form-group\", 4, \"ngIf\"], [3, \"click\"], [\"for\", \"editDoctor\"], [\"id\", \"editDoctor\", \"name\", \"editDoctor\", \"required\", \"\", 3, \"ngModel\", \"ngModelChange\", \"change\"], [\"type\", \"button\", 3, \"click\"], [3, \"ngValue\"], [\"for\", \"editSlot\"], [\"id\", \"editSlot\", \"name\", \"editSlot\", \"required\", \"\", 3, \"ngModel\", \"ngModelChange\"], [\"for\", \"reserveSlot\"], [\"id\", \"reserveSlot\", \"name\", \"reserveSlot\", \"required\", \"\", 3, \"ngModel\", \"ngModelChange\"]],\n    template: function PatientComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\", 0)(1, \"h2\");\n        i0.ɵɵtext(2, \"Hello, Patient\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(3, \"h3\");\n        i0.ɵɵtext(4, \"My Appointments\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(5, \"table\")(6, \"thead\")(7, \"tr\")(8, \"th\");\n        i0.ɵɵtext(9, \"Date\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(10, \"th\");\n        i0.ɵɵtext(11, \"Time\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(12, \"th\");\n        i0.ɵɵtext(13, \"Doctor's Name\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(14, \"th\");\n        i0.ɵɵtext(15, \"Actions\");\n        i0.ɵɵelementEnd()()();\n        i0.ɵɵelementStart(16, \"tbody\");\n        i0.ɵɵtemplate(17, PatientComponent_tr_17_Template, 12, 3, \"tr\", 1);\n        i0.ɵɵelementEnd()();\n        i0.ɵɵtemplate(18, PatientComponent_div_18_Template, 12, 3, \"div\", 2);\n        i0.ɵɵelementStart(19, \"div\", 3)(20, \"label\", 4);\n        i0.ɵɵtext(21, \"Select Doctor:\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(22, \"select\", 5);\n        i0.ɵɵlistener(\"ngModelChange\", function PatientComponent_Template_select_ngModelChange_22_listener($event) {\n          return ctx.selectedDoctor = $event;\n        })(\"change\", function PatientComponent_Template_select_change_22_listener() {\n          return ctx.loadDoctorSlots(false);\n        });\n        i0.ɵɵtemplate(23, PatientComponent_option_23_Template, 2, 2, \"option\", 6);\n        i0.ɵɵelementEnd()();\n        i0.ɵɵtemplate(24, PatientComponent_div_24_Template, 5, 2, \"div\", 7);\n        i0.ɵɵelementStart(25, \"button\", 8);\n        i0.ɵɵlistener(\"click\", function PatientComponent_Template_button_click_25_listener() {\n          return ctx.reserveAppointment();\n        });\n        i0.ɵɵtext(26, \"Reserve\");\n        i0.ɵɵelementEnd()();\n      }\n      if (rf & 2) {\n        i0.ɵɵadvance(17);\n        i0.ɵɵproperty(\"ngForOf\", ctx.appointments);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.editedAppointment);\n        i0.ɵɵadvance(4);\n        i0.ɵɵproperty(\"ngModel\", ctx.selectedDoctor);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngForOf\", ctx.doctors);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.selectedDoctor);\n      }\n    },\n    dependencies: [i4.NgForOf, i4.NgIf, i5.ɵNgNoValidate, i5.NgSelectOption, i5.ɵNgSelectMultipleOption, i5.SelectControlValueAccessor, i5.NgControlStatus, i5.NgControlStatusGroup, i5.RequiredValidator, i5.NgModel, i5.NgForm],\n    styles: [\".patient-container[_ngcontent-%COMP%] {\\n    width: 80%;\\n    margin: 0 auto;\\n    padding: 20px;\\n  }\\n  \\n  table[_ngcontent-%COMP%] {\\n    width: 100%;\\n    border-collapse: collapse;\\n    margin-bottom: 20px;\\n  }\\n  \\n  table[_ngcontent-%COMP%], th[_ngcontent-%COMP%], td[_ngcontent-%COMP%] {\\n    border: 2px solid #ccc;\\n    text-align: left;\\n  }\\n  \\n  th[_ngcontent-%COMP%], td[_ngcontent-%COMP%] {\\n    padding: 10px;\\n  }\\n  \\n  .form-group[_ngcontent-%COMP%] {\\n    margin-bottom: 15px;\\n  }\\n  \\n  input[type=\\\"date\\\"][_ngcontent-%COMP%], input[type=\\\"time\\\"][_ngcontent-%COMP%], select[_ngcontent-%COMP%] {\\n    width: calc(100% - 20px);\\n    padding: 10px;\\n    font-size: 16px;\\n    border: 2px solid #ccc;\\n    border-radius: 5px;\\n  }\\n  \\n  button[_ngcontent-%COMP%] {\\n    padding: 10px 20px;\\n    font-size: 16px;\\n    border: none;\\n    background-color: #4caf50;\\n    color: white;\\n    cursor: pointer;\\n    border-radius: 5px;\\n    margin-right: 10px; \\n  }\\n  \\n  button[_ngcontent-%COMP%]:last-child {\\n    margin-right: 0; \\n  }\\n  \\n  button[_ngcontent-%COMP%]:hover {\\n    background-color: #45a049;\\n  }\\n  \\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8uL3NyYy9hcHAvcGF0aWVudC9wYXRpZW50LmNvbXBvbmVudC5jc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUNBO0lBQ0ksVUFBVTtJQUNWLGNBQWM7SUFDZCxhQUFhO0VBQ2Y7O0VBRUE7SUFDRSxXQUFXO0lBQ1gseUJBQXlCO0lBQ3pCLG1CQUFtQjtFQUNyQjs7RUFFQTtJQUNFLHNCQUFzQjtJQUN0QixnQkFBZ0I7RUFDbEI7O0VBRUE7SUFDRSxhQUFhO0VBQ2Y7O0VBRUE7SUFDRSxtQkFBbUI7RUFDckI7O0VBRUE7OztJQUdFLHdCQUF3QjtJQUN4QixhQUFhO0lBQ2IsZUFBZTtJQUNmLHNCQUFzQjtJQUN0QixrQkFBa0I7RUFDcEI7O0VBRUE7SUFDRSxrQkFBa0I7SUFDbEIsZUFBZTtJQUNmLFlBQVk7SUFDWix5QkFBeUI7SUFDekIsWUFBWTtJQUNaLGVBQWU7SUFDZixrQkFBa0I7SUFDbEIsa0JBQWtCO0VBQ3BCOztFQUVBO0lBQ0UsZUFBZTtFQUNqQjs7RUFFQTtJQUNFLHlCQUF5QjtFQUMzQiIsInNvdXJjZXNDb250ZW50IjpbIlxyXG4ucGF0aWVudC1jb250YWluZXIge1xyXG4gICAgd2lkdGg6IDgwJTtcclxuICAgIG1hcmdpbjogMCBhdXRvO1xyXG4gICAgcGFkZGluZzogMjBweDtcclxuICB9XHJcbiAgXHJcbiAgdGFibGUge1xyXG4gICAgd2lkdGg6IDEwMCU7XHJcbiAgICBib3JkZXItY29sbGFwc2U6IGNvbGxhcHNlO1xyXG4gICAgbWFyZ2luLWJvdHRvbTogMjBweDtcclxuICB9XHJcbiAgXHJcbiAgdGFibGUsIHRoLCB0ZCB7XHJcbiAgICBib3JkZXI6IDJweCBzb2xpZCAjY2NjO1xyXG4gICAgdGV4dC1hbGlnbjogbGVmdDtcclxuICB9XHJcbiAgXHJcbiAgdGgsIHRkIHtcclxuICAgIHBhZGRpbmc6IDEwcHg7XHJcbiAgfVxyXG4gIFxyXG4gIC5mb3JtLWdyb3VwIHtcclxuICAgIG1hcmdpbi1ib3R0b206IDE1cHg7XHJcbiAgfVxyXG4gIFxyXG4gIGlucHV0W3R5cGU9XCJkYXRlXCJdLFxyXG4gIGlucHV0W3R5cGU9XCJ0aW1lXCJdLFxyXG4gIHNlbGVjdCB7XHJcbiAgICB3aWR0aDogY2FsYygxMDAlIC0gMjBweCk7XHJcbiAgICBwYWRkaW5nOiAxMHB4O1xyXG4gICAgZm9udC1zaXplOiAxNnB4O1xyXG4gICAgYm9yZGVyOiAycHggc29saWQgI2NjYztcclxuICAgIGJvcmRlci1yYWRpdXM6IDVweDtcclxuICB9XHJcbiAgXHJcbiAgYnV0dG9uIHtcclxuICAgIHBhZGRpbmc6IDEwcHggMjBweDtcclxuICAgIGZvbnQtc2l6ZTogMTZweDtcclxuICAgIGJvcmRlcjogbm9uZTtcclxuICAgIGJhY2tncm91bmQtY29sb3I6ICM0Y2FmNTA7XHJcbiAgICBjb2xvcjogd2hpdGU7XHJcbiAgICBjdXJzb3I6IHBvaW50ZXI7XHJcbiAgICBib3JkZXItcmFkaXVzOiA1cHg7XHJcbiAgICBtYXJnaW4tcmlnaHQ6IDEwcHg7IFxyXG4gIH1cclxuICBcclxuICBidXR0b246bGFzdC1jaGlsZCB7XHJcbiAgICBtYXJnaW4tcmlnaHQ6IDA7IFxyXG4gIH1cclxuICBcclxuICBidXR0b246aG92ZXIge1xyXG4gICAgYmFja2dyb3VuZC1jb2xvcjogIzQ1YTA0OTtcclxuICB9XHJcbiAgIl0sInNvdXJjZVJvb3QiOiIifQ== */\"]\n  });\n}","map":{"version":3,"names":["i0","ɵɵelementStart","ɵɵtext","ɵɵelementEnd","ɵɵlistener","PatientComponent_tr_17_Template_button_click_8_listener","restoredCtx","ɵɵrestoreView","_r6","appointment_r4","$implicit","ctx_r5","ɵɵnextContext","ɵɵresetView","editAppointment","PatientComponent_tr_17_Template_button_click_10_listener","ctx_r7","cancelAppointment","ɵɵadvance","ɵɵtextInterpolate","date","time","doctorName","ɵɵproperty","doctor_r10","name","slot_r12","ɵɵtextInterpolate2","PatientComponent_div_18_div_9_Template_select_ngModelChange_3_listener","$event","_r14","ctx_r13","editedSlot","ɵɵtemplate","PatientComponent_div_18_div_9_option_4_Template","ctx_r9","editedAvailableSlots","PatientComponent_div_18_Template_select_ngModelChange_7_listener","_r16","ctx_r15","editedDoctor","PatientComponent_div_18_Template_select_change_7_listener","ctx_r17","loadDoctorSlots","PatientComponent_div_18_option_8_Template","PatientComponent_div_18_div_9_Template","PatientComponent_div_18_Template_button_click_10_listener","ctx_r18","saveEditedAppointment","ctx_r1","doctors","doctor_r19","slot_r21","PatientComponent_div_24_Template_select_ngModelChange_3_listener","_r23","ctx_r22","selectedSlot","PatientComponent_div_24_option_4_Template","ctx_r3","availableSlots","PatientComponent","constructor","doctorService","route","patientService","appointments","newAppointment","editedAppointment","loadDoctors","params","subscribe","patientID","console","log","ngOnInit","loadPatientSlots","getDoctors","isEditing","selectedDoctor","getDoctorSlots","_id","slots","viewPatientSlots","appointment","slotId","slotID","deleteSlot","response","error","id","oldSlotId","newSlotId","patientId","updateReservedSlot","index","findIndex","formatTime","options","hour","minute","hour12","Intl","DateTimeFormat","format","parseTimeString","timeString","hoursStr","minutesStr","split","hours","parseInt","minutes","isNaN","Date","setHours","reserveAppointment","reserveSlot","reservationResponse","reservationError","_","ɵɵdirectiveInject","i1","DoctorService","i2","ActivatedRoute","i3","PatientService","_2","selectors","decls","vars","consts","template","PatientComponent_Template","rf","ctx","PatientComponent_tr_17_Template","PatientComponent_div_18_Template","PatientComponent_Template_select_ngModelChange_22_listener","PatientComponent_Template_select_change_22_listener","PatientComponent_option_23_Template","PatientComponent_div_24_Template","PatientComponent_Template_button_click_25_listener"],"sources":["D:\\Year4\\Tools 3\\clinic-appointment-app\\src\\app\\patient\\patient.component.ts","D:\\Year4\\Tools 3\\clinic-appointment-app\\src\\app\\patient\\patient.component.html"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { DoctorService } from '../doctor/doctor.service';\nimport { PatientService } from './patient.service';\nimport { ActivatedRoute } from '@angular/router';\n\ninterface Doctor {\n  id: string;\n  name: string;\n}\n\ninterface Slot {\n  time: string;\n  date:string;\n  id:string;\n}\n@Component({\n  selector: 'app-patient',\n  templateUrl: './patient.component.html',\n  styleUrls: ['./patient.component.css']\n})\nexport class PatientComponent implements OnInit{\n  selectedDoctor: any;\n  doctors: Doctor[] = [];\n  appointments: any[] = [];\n  newAppointment: { date: string, time: string, slot?: Slot } = { date: '', time: ''};\n  availableSlots: Slot[] = [];\n  editedAppointment: any | null = null;\n  selectedSlot: any ;\n  patientID :any;\n\n  editedDoctor: any;\n  editedSlot: any;\n  editedAvailableSlots: any[] = [];\n\n  oldID:any;\n  constructor(private doctorService: DoctorService , private route: ActivatedRoute,private patientService:PatientService) {\n    this.loadDoctors();\n    this.route.params.subscribe(params => {\n      this.patientID = params['id'];\n    });\n    console.log(this.patientID);\n  }\n\n  ngOnInit() {\n    \n      this.loadPatientSlots();\n  }\nloadDoctors() {\n    this.doctorService.getDoctors().subscribe((doctors: Doctor[]) => {\n    this.doctors = doctors;\n    console.log('Doctors:', this.doctors); \n  });\n  }\n\n  loadDoctorSlots(isEditing: boolean) {\n    const selectedDoctor = isEditing ? this.editedDoctor : this.selectedDoctor;\n  \n    if (selectedDoctor) {\n      this.doctorService.getDoctorSlots(selectedDoctor._id).subscribe((slots: Slot[]) => {\n        if (isEditing) {\n          this.editedAvailableSlots = slots;\n        } else {\n          this.availableSlots = slots;\n        }\n      });\n    }\n  }\n  \n\n  loadPatientSlots() {\n    console.log(this.patientID)\n    \n    this.patientService.viewPatientSlots(this.patientID).subscribe((slots: Slot[]) => {\n      this.appointments = slots;\n      console.log(this.appointments);\n      });\n  }\n  cancelAppointment(appointment: any) {\n    const slotId = appointment.slotID;\n    console.log(slotId);\n      this.patientService.deleteSlot(slotId).subscribe(\n      (response) => {\n        console.log('Slot canceled successfully:', response);\n        this.loadPatientSlots();\n      },\n      (error) => {\n        console.error('Error canceling slot:', error);\n      }\n    );\n  }\n  editAppointment(appointment: any) {\n    \n    \n  }\n  saveEditedAppointment() {\n    console.log(\"old slot \", this.editedAppointment.slotId);\n    console.log(\"new slot id\",this.editedSlot.id);\n    console.log(\"patient id \",this.patientID)\n      // Assuming you have the necessary data to call updateReservedSlot\n      const oldSlotId = this.editedAppointment.slotId; // Replace with the actual property in your data\n      const newSlotId = this.editedSlot.id; // Replace with the actual property in your data\n      const patientId = this.patientID; // Replace with the actual property in your data\n  \n      // Call the service to update the reserved slot\n      this.patientService.updateReservedSlot(oldSlotId, newSlotId, patientId).subscribe(\n        () => {\n          // Update the appointment in your local array\n          const index = this.appointments.findIndex(appointment => appointment.id === this.editedAppointment.id);\n          if (index !== -1) {\n            this.appointments[index] = { ...this.editedAppointment };\n            this.editedAppointment = null;\n          }\n          // Handle success if needed\n        },\n        (error) => {\n          // Handle error if needed\n          console.error('Error updating reserved slot:', error);\n        }\n      );\n    }\n  \n\nformatTime(time: Date): string {\n  const options: Intl.DateTimeFormatOptions = { hour: 'numeric', minute: 'numeric', hour12: true };\n  return new Intl.DateTimeFormat('en-US', options).format(time);\n}\n\nprivate parseTimeString(timeString: string): Date | null {\n  const [hoursStr, minutesStr] = timeString.split(':');\n  const hours = parseInt(hoursStr, 10);\n  const minutes = parseInt(minutesStr, 10);\n\n  if (isNaN(hours) || isNaN(minutes)) {\n    console.error('Invalid time format. Please enter a valid time.');\n    return null;\n  }\n\n  const date = new Date();\n  date.setHours(hours, minutes, 0, 0);\n\n  return date;\n }\n\nreserveAppointment() {\n  console.log(\"inside the reserve\");\n    console.log(this.selectedSlot.id);\n    console.log(this.patientID)\n    this.patientService.reserveSlot(this.selectedSlot.id, this.patientID)\n            .subscribe(\n              (reservationResponse: any) => {\n                this.loadPatientSlots();\n                console.log('Slot reserved successfully:', reservationResponse);\n              },\n              (reservationError: any) => {\n                console.error('Error reserving slot:', reservationError);\n              }\n            );\n}\n}","<div class=\"patient-container\">\n  <h2>Hello, Patient</h2>\n\n  <h3>My Appointments</h3>\n  <table>\n    <thead>\n      <tr>\n        <th>Date</th>\n        <th>Time</th>\n        <th>Doctor's Name</th>\n        <th>Actions</th>\n      </tr>\n    </thead>\n\n    <tbody>\n      <tr *ngFor=\"let appointment of appointments\">\n        <td>{{ appointment.date }}</td>\n        <td>{{ appointment.time }}</td>\n        <td>{{ appointment.doctorName }}</td>\n        <td>\n          <button (click)=\"editAppointment(appointment)\">Edit</button>\n          <button (click)=\"cancelAppointment(appointment)\">Cancel</button>\n        </td>\n      </tr>\n    </tbody>\n  </table>\n\n  <div *ngIf=\"editedAppointment\">\n    <h3>Edit Appointment</h3>\n    <form>\n      <div class=\"form-group\">\n        <label for=\"editDoctor\">Select Doctor:</label>\n        <select id=\"editDoctor\" [(ngModel)]=\"editedDoctor\" name=\"editDoctor\" required (change)=\"loadDoctorSlots(true)\">\n          <option *ngFor=\"let doctor of doctors\" [ngValue]=\"doctor\">{{ doctor.name }}</option>\n        </select>\n      </div>\n      <div class=\"form-group\" *ngIf=\"editedDoctor\">\n        <label for=\"editSlot\">Select Slot:</label>\n        <select id=\"editSlot\" [(ngModel)]=\"editedSlot\" name=\"editSlot\" required>\n          <option *ngFor=\"let slot of editedAvailableSlots\" [ngValue]=\"slot\">{{ slot.date }} - {{ slot.time }}</option>\n        </select>\n        \n      </div>\n      <button type=\"button\" (click)=\"saveEditedAppointment()\">Save</button>\n    </form>\n  </div>\n  \n  <div class=\"form-group\">\n    <label for=\"reserveDoctor\">Select Doctor:</label>\n    <select id=\"reserveDoctor\" [(ngModel)]=\"selectedDoctor\" name=\"reserveDoctor\" required (change)=\"loadDoctorSlots(false)\">\n      <option *ngFor=\"let doctor of doctors\" [ngValue]=\"doctor\">{{ doctor.name }}</option>\n    </select>\n  </div>\n  \n  <div class=\"form-group\" *ngIf=\"selectedDoctor\">\n    <label for=\"reserveSlot\">Select Slot:</label>\n    <select id=\"reserveSlot\" [(ngModel)]=\"selectedSlot\" name=\"reserveSlot\" required>\n      <option *ngFor=\"let slot of availableSlots\" [ngValue]=\"slot\">{{ slot.date }} - {{ slot.time }}</option>\n    </select>\n    \n  </div>\n  <button (click)=\"reserveAppointment()\">Reserve</button>\n  \n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}