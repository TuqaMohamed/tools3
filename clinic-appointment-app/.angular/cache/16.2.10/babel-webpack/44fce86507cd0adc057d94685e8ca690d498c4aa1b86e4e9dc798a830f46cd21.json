{"ast":null,"code":"import { HttpHeaders, HttpErrorResponse } from '@angular/common/http';\nimport { tap } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class LoginService {\n  constructor(http) {\n    this.http = http;\n    this.apiUrl = 'http://localhost:8080';\n  }\n  login(Name, Password) {\n    const user = {\n      Name,\n      Password\n    };\n    console.log('Request payload:', user);\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/json'\n    });\n    return this.http.post(`${this.apiUrl}/signin`, user, {\n      headers\n    }).pipe(tap(response => {\n      console.log('Response:', response);\n      if (response === 200) {\n        // Handle success here\n      }\n    }, error => {\n      if (error.status != 200) {\n        console.error('Error:', error);\n        if (error instanceof HttpErrorResponse) {\n          console.log('Error Status:', error.status);\n          console.log('Error Headers:', error.headers);\n          console.log('Error Body:', error.error);\n        }\n      }\n    }));\n  }\n  static #_ = this.ɵfac = function LoginService_Factory(t) {\n    return new (t || LoginService)(i0.ɵɵinject(i1.HttpClient));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: LoginService,\n    factory: LoginService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"names":["HttpHeaders","HttpErrorResponse","tap","LoginService","constructor","http","apiUrl","login","Name","Password","user","console","log","headers","post","pipe","response","error","status","_","i0","ɵɵinject","i1","HttpClient","_2","factory","ɵfac","providedIn"],"sources":["D:\\Year4\\Tools 3\\clinic-appointment-app\\src\\app\\login\\login.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient, HttpHeaders ,HttpErrorResponse} from '@angular/common/http';\nimport { Observable ,tap} from 'rxjs';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class LoginService {\n  private apiUrl = 'http://localhost:8080';\n\n  constructor(private http: HttpClient) {}\n\n  login(Name: string, Password: string): Observable<any> {\n    const user = { Name, Password };\n    console.log('Request payload:', user);\n    const headers = new HttpHeaders({ 'Content-Type': 'application/json' });\n\n    return this.http.post(`${this.apiUrl}/signin`, user,{ headers }).pipe(\n      tap(\n       (response) => { console.log('Response:', response);\n   if (response === 200) {\n     // Handle success here\n   }},\n       (error) => {\n         if(error.status!=200){\n         console.error('Error:', error);\n         if (error instanceof HttpErrorResponse) {\n           console.log('Error Status:', error.status);\n           console.log('Error Headers:', error.headers);\n           console.log('Error Body:', error.error);\n         }\n       }\n     }\n     )\n );\n  }\n}\n"],"mappings":"AACA,SAAqBA,WAAW,EAAEC,iBAAiB,QAAO,sBAAsB;AAChF,SAAqBC,GAAG,QAAO,MAAM;;;AAKrC,OAAM,MAAOC,YAAY;EAGvBC,YAAoBC,IAAgB;IAAhB,KAAAA,IAAI,GAAJA,IAAI;IAFhB,KAAAC,MAAM,GAAG,uBAAuB;EAED;EAEvCC,KAAKA,CAACC,IAAY,EAAEC,QAAgB;IAClC,MAAMC,IAAI,GAAG;MAAEF,IAAI;MAAEC;IAAQ,CAAE;IAC/BE,OAAO,CAACC,GAAG,CAAC,kBAAkB,EAAEF,IAAI,CAAC;IACrC,MAAMG,OAAO,GAAG,IAAIb,WAAW,CAAC;MAAE,cAAc,EAAE;IAAkB,CAAE,CAAC;IAEvE,OAAO,IAAI,CAACK,IAAI,CAACS,IAAI,CAAC,GAAG,IAAI,CAACR,MAAM,SAAS,EAAEI,IAAI,EAAC;MAAEG;IAAO,CAAE,CAAC,CAACE,IAAI,CACnEb,GAAG,CACDc,QAAQ,IAAI;MAAGL,OAAO,CAACC,GAAG,CAAC,WAAW,EAAEI,QAAQ,CAAC;MACtD,IAAIA,QAAQ,KAAK,GAAG,EAAE;QACpB;MAAA;IACD,CAAC,EACGC,KAAK,IAAI;MACR,IAAGA,KAAK,CAACC,MAAM,IAAE,GAAG,EAAC;QACrBP,OAAO,CAACM,KAAK,CAAC,QAAQ,EAAEA,KAAK,CAAC;QAC9B,IAAIA,KAAK,YAAYhB,iBAAiB,EAAE;UACtCU,OAAO,CAACC,GAAG,CAAC,eAAe,EAAEK,KAAK,CAACC,MAAM,CAAC;UAC1CP,OAAO,CAACC,GAAG,CAAC,gBAAgB,EAAEK,KAAK,CAACJ,OAAO,CAAC;UAC5CF,OAAO,CAACC,GAAG,CAAC,aAAa,EAAEK,KAAK,CAACA,KAAK,CAAC;;;IAG7C,CAAC,CACA,CACJ;EACA;EAAC,QAAAE,CAAA,G;qBA5BUhB,YAAY,EAAAiB,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;EAAA;EAAA,QAAAC,EAAA,G;WAAZrB,YAAY;IAAAsB,OAAA,EAAZtB,YAAY,CAAAuB,IAAA;IAAAC,UAAA,EAFX;EAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}