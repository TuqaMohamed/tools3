{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nexport let DoctorComponent = class DoctorComponent {\n  constructor(doctorService, route) {\n    this.doctorService = doctorService;\n    this.route = route;\n    this.appointments = [];\n    this.showMessagesDropdown = false;\n    this.doctorMessages = ['ReservationCreated', 'ReservationUpdated', 'ReservationCancelled'];\n    this.newAppointment = {\n      date: '',\n      time: ''\n    };\n  }\n  ngOnInit() {\n    this.route.params.subscribe(params => {\n      this.id = params['id'];\n    });\n    this.loadDoctorSlots();\n  }\n  loadDoctorSlots() {\n    const doctorId = this.id;\n    console.log(doctorId);\n    this.doctorService.getDoctorSlots(this.id).subscribe(response => {\n      console.log('Slots successfully retrieved:', response);\n      this.appointments = response;\n    }, error => {\n      console.error('Error fetching doctor slots:', error);\n    });\n  }\n  toggleMessagesDropdown() {\n    this.showMessagesDropdown = !this.showMessagesDropdown;\n  }\n  fetchDoctorMessages() {\n    this.doctorMessages = ['Message 1', 'Message 2', 'Message 3'];\n  }\n  editAppointment(appointment) {\n    console.log('Edit appointment:', appointment);\n  }\n  cancelAppointment(appointment) {\n    const index = this.appointments.indexOf(appointment);\n    if (index !== -1) {\n      this.appointments.splice(index, 1);\n    }\n  }\n  addAppointmentAndSetSchedule() {\n    const parsedTime = this.parseTimeString(this.newAppointment.time);\n    if (parsedTime) {\n      const newAppointment = {\n        slot: {\n          date: this.newAppointment.date,\n          time: this.formatTime(parsedTime)\n        }\n      };\n      this.doctorService.setDoctorSchedule(newAppointment, this.id).subscribe(response => {\n        console.log('Appointment added and schedule set successfully', response);\n      }, error => {\n        console.error('Error adding appointment and setting schedule:', error);\n      });\n      this.newAppointment = {\n        date: '',\n        time: ''\n      };\n    } else {\n      console.error('Invalid time format');\n    }\n  }\n  formatTime(date) {\n    const hours = date.getHours();\n    const minutes = date.getMinutes();\n    const ampm = hours >= 12 ? 'PM' : 'AM';\n    const formattedHours = hours % 12 === 0 ? 12 : hours % 12;\n    const formattedMinutes = minutes < 10 ? '0' + minutes : minutes;\n    return `${formattedHours}:${formattedMinutes}${ampm}`;\n  }\n  parseTimeString(timeString) {\n    const [hoursStr, minutesStr] = timeString.split(':');\n    const hours = parseInt(hoursStr, 10);\n    const minutes = parseInt(minutesStr, 10);\n    if (isNaN(hours) || isNaN(minutes)) {\n      console.error('Invalid time format. Please enter a valid time.');\n      return null;\n    }\n    const date = new Date();\n    date.setHours(hours, minutes, 0, 0);\n    return date;\n  }\n};\nDoctorComponent = __decorate([Component({\n  selector: 'app-doctor',\n  templateUrl: './doctor.component.html',\n  styleUrls: ['./doctor.component.css']\n})], DoctorComponent);","map":{"version":3,"names":["Component","DoctorComponent","constructor","doctorService","route","appointments","showMessagesDropdown","doctorMessages","newAppointment","date","time","ngOnInit","params","subscribe","id","loadDoctorSlots","doctorId","console","log","getDoctorSlots","response","error","toggleMessagesDropdown","fetchDoctorMessages","editAppointment","appointment","cancelAppointment","index","indexOf","splice","addAppointmentAndSetSchedule","parsedTime","parseTimeString","slot","formatTime","setDoctorSchedule","hours","getHours","minutes","getMinutes","ampm","formattedHours","formattedMinutes","timeString","hoursStr","minutesStr","split","parseInt","isNaN","Date","setHours","__decorate","selector","templateUrl","styleUrls"],"sources":["D:\\Year4\\Tools 3\\clinic-appointment-app\\src\\app\\doctor\\doctor.component.ts"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { DoctorService } from './doctor.service';\nimport { ActivatedRoute } from '@angular/router';\n@Component({\n  selector: 'app-doctor',\n  templateUrl: './doctor.component.html',\n  styleUrls: ['./doctor.component.css']\n})\nexport class DoctorComponent implements OnInit{\n  appointments: any[] = [];\n  showMessagesDropdown: boolean = false;\n  doctorMessages: string[] = [\n  'ReservationCreated',\n  'ReservationUpdated',\n  'ReservationCancelled'\n]; \n  id: any;\n  newAppointment: { date: string, time: string } = { date: '', time: '' };\n  constructor(private doctorService: DoctorService,private route: ActivatedRoute) { }\n  ngOnInit() {\n    this.route.params.subscribe(params=>\n      {this.id= params['id'];}\n      );\n      this.loadDoctorSlots();\n\n  }\n  loadDoctorSlots() {\n    const doctorId = this.id;\n    console.log(doctorId);\n    this.doctorService.getDoctorSlots(this.id).subscribe(\n      (response) => {\n        console.log('Slots successfully retrieved:', response);\n        this.appointments = response;\n      },\n      (error) => {\n        console.error('Error fetching doctor slots:', error);\n      }\n    );\n  }\n  toggleMessagesDropdown() \n  {\n    this.showMessagesDropdown = !this.showMessagesDropdown;\n  }\n  \n  fetchDoctorMessages() \n  {\n    this.doctorMessages = ['Message 1', 'Message 2', 'Message 3'];\n  }\n\n  editAppointment(appointment: any) \n  {\n    console.log('Edit appointment:', appointment);\n  }\n\n  cancelAppointment(appointment: any) \n  {\n    const index = this.appointments.indexOf(appointment);\n    if (index !== -1) {\n      this.appointments.splice(index, 1);\n    }\n  }\n  addAppointmentAndSetSchedule() {\n    const parsedTime = this.parseTimeString(this.newAppointment.time);\n    if (parsedTime) {\n      const newAppointment = {\n        slot: {\n          date: this.newAppointment.date,\n          time: this.formatTime(parsedTime)\n        }\n      };\n  \n      this.doctorService.setDoctorSchedule(newAppointment, this.id).subscribe(\n        (response) => {\n          console.log('Appointment added and schedule set successfully', response);\n        },\n        (error) => {\n          console.error('Error adding appointment and setting schedule:', error);\n        }\n      );\n  \n      this.newAppointment = { date: '', time: '' };\n    } else {\n      console.error('Invalid time format');\n    }\n  }\n  \n  private formatTime(date: Date): string {\n    const hours = date.getHours();\n    const minutes = date.getMinutes();\n    const ampm = hours >= 12 ? 'PM' : 'AM';\n    const formattedHours = hours % 12 === 0 ? 12 : hours % 12;\n    const formattedMinutes = minutes < 10 ? '0' + minutes : minutes;\n  \n    return `${formattedHours}:${formattedMinutes}${ampm}`;\n  }\n  \n    private parseTimeString(timeString: string): Date | null \n  {\n    const [hoursStr, minutesStr] = timeString.split(':');\n    const hours = parseInt(hoursStr, 10);\n    const minutes = parseInt(minutesStr, 10);\n  \n    if (isNaN(hours) || isNaN(minutes)) {\n      console.error('Invalid time format. Please enter a valid time.');\n      return null;\n    }\n    const date = new Date();\n    date.setHours(hours, minutes, 0, 0);\n    return date;\n  }\n  \n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}