{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nexport let PatientComponent = class PatientComponent {\n  constructor(doctorService) {\n    this.doctorService = doctorService;\n    this.appointments = [{\n      date: new Date('2023-11-15T10:00:00'),\n      doctorName: 'Dr. Smith'\n    }, {\n      date: new Date('2023-11-16T14:30:00'),\n      doctorName: 'Dr. Johnson'\n    }];\n    this.doctors = [];\n    this.newAppointment = {\n      date: '',\n      time: ''\n    };\n    this.loadDoctors();\n  }\n  loadDoctors() {\n    this.doctorService.getDoctors().subscribe(doctors => {\n      this.doctors = doctors;\n    });\n  }\n  loadDoctorSlots() {\n    if (this.selectedDoctor) {\n      this.doctorService.getDoctorSlots(this.selectedDoctor.id).subscribe(slots => {\n        // Assuming slots contain objects with 'date' and 'time' properties\n        this.appointments = slots.map(slot => ({\n          date: new Date(slot.date),\n          time: new Date(slot.time),\n          doctorName: this.selectedDoctor.name\n        }));\n      });\n    }\n  }\n  cancelAppointment(appointment) {\n    const index = this.appointments.indexOf(appointment);\n    if (index !== -1) {\n      this.appointments.splice(index, 1);\n    }\n  }\n  editAppointment(appointment) {\n    // Logic to edit the appointment\n    console.log('Edit appointment:', appointment);\n  }\n  reserveAppointment() {\n    const newDate = new Date(this.newAppointment.date);\n    const newTime = new Date(this.newAppointment.time);\n    if (!isNaN(newDate.getTime()) && !isNaN(newTime.getTime()) && this.selectedDoctor) {\n      this.appointments.push({\n        date: newDate,\n        time: newTime,\n        doctorName: this.selectedDoctor.name\n      });\n      this.newAppointment = {\n        date: '',\n        time: ''\n      };\n    } else {\n      alert('Invalid date, time, or doctor selection. Please enter valid details.');\n    }\n  }\n};\nPatientComponent = __decorate([Component({\n  selector: 'app-patient',\n  templateUrl: './patient.component.html',\n  styleUrls: ['./patient.component.css']\n})], PatientComponent);","map":{"version":3,"names":["Component","PatientComponent","constructor","doctorService","appointments","date","Date","doctorName","doctors","newAppointment","time","loadDoctors","getDoctors","subscribe","loadDoctorSlots","selectedDoctor","getDoctorSlots","id","slots","map","slot","name","cancelAppointment","appointment","index","indexOf","splice","editAppointment","console","log","reserveAppointment","newDate","newTime","isNaN","getTime","push","alert","__decorate","selector","templateUrl","styleUrls"],"sources":["D:\\Year4\\Tools 3\\clinic-appointment-app\\src\\app\\patient\\patient.component.ts"],"sourcesContent":["import { Component } from '@angular/core';\nimport\n\n@Component({\n  selector: 'app-patient',\n  templateUrl: './patient.component.html',\n  styleUrls: ['./patient.component.css']\n})\nexport class PatientComponent {\n  selectedDoctor: any;\n  appointments: any[] = [\n    { date: new Date('2023-11-15T10:00:00'), doctorName: 'Dr. Smith' },\n    { date: new Date('2023-11-16T14:30:00'), doctorName: 'Dr. Johnson' }\n  ];\n  doctors: any[] = [];\n  newAppointment: { date: string, time: string } = { date: '', time: '' };\n\n  constructor(private doctorService: DoctorService) {\n    this.loadDoctors();\n  }\n\n  loadDoctors() {\n    this.doctorService.getDoctors().subscribe((doctors: any[]) => {\n      this.doctors = doctors;\n    });\n  }\n\n  loadDoctorSlots() {\n    if (this.selectedDoctor) {\n      this.doctorService.getDoctorSlots(this.selectedDoctor.id).subscribe((slots: any[]) => {\n        // Assuming slots contain objects with 'date' and 'time' properties\n        this.appointments = slots.map(slot => ({\n          date: new Date(slot.date),\n          time: new Date(slot.time),\n          doctorName: this.selectedDoctor.name\n        }));\n      });\n    }\n  }\n\n  cancelAppointment(appointment: any) {\n    const index = this.appointments.indexOf(appointment);\n    if (index !== -1) {\n      this.appointments.splice(index, 1);\n    }\n  }\n\n  editAppointment(appointment: any) {\n    // Logic to edit the appointment\n    console.log('Edit appointment:', appointment);\n  }\n\n  reserveAppointment() {\n    const newDate = new Date(this.newAppointment.date);\n    const newTime = new Date(this.newAppointment.time);\n    if (!isNaN(newDate.getTime()) && !isNaN(newTime.getTime()) && this.selectedDoctor) {\n      this.appointments.push({\n        date: newDate,\n        time: newTime,\n        doctorName: this.selectedDoctor.name\n      });\n      this.newAppointment = { date: '', time: '' };\n    } else {\n      alert('Invalid date, time, or doctor selection. Please enter valid details.');\n    }\n  }\n}\n"],"mappings":";AAAA,SAASA,SAAS,QAAQ,eAAe;AAQlC,WAAMC,gBAAgB,GAAtB,MAAMA,gBAAgB;EAS3BC,YAAoBC,aAA4B;IAA5B,KAAAA,aAAa,GAAbA,aAAa;IAPjC,KAAAC,YAAY,GAAU,CACpB;MAAEC,IAAI,EAAE,IAAIC,IAAI,CAAC,qBAAqB,CAAC;MAAEC,UAAU,EAAE;IAAW,CAAE,EAClE;MAAEF,IAAI,EAAE,IAAIC,IAAI,CAAC,qBAAqB,CAAC;MAAEC,UAAU,EAAE;IAAa,CAAE,CACrE;IACD,KAAAC,OAAO,GAAU,EAAE;IACnB,KAAAC,cAAc,GAAmC;MAAEJ,IAAI,EAAE,EAAE;MAAEK,IAAI,EAAE;IAAE,CAAE;IAGrE,IAAI,CAACC,WAAW,EAAE;EACpB;EAEAA,WAAWA,CAAA;IACT,IAAI,CAACR,aAAa,CAACS,UAAU,EAAE,CAACC,SAAS,CAAEL,OAAc,IAAI;MAC3D,IAAI,CAACA,OAAO,GAAGA,OAAO;IACxB,CAAC,CAAC;EACJ;EAEAM,eAAeA,CAAA;IACb,IAAI,IAAI,CAACC,cAAc,EAAE;MACvB,IAAI,CAACZ,aAAa,CAACa,cAAc,CAAC,IAAI,CAACD,cAAc,CAACE,EAAE,CAAC,CAACJ,SAAS,CAAEK,KAAY,IAAI;QACnF;QACA,IAAI,CAACd,YAAY,GAAGc,KAAK,CAACC,GAAG,CAACC,IAAI,KAAK;UACrCf,IAAI,EAAE,IAAIC,IAAI,CAACc,IAAI,CAACf,IAAI,CAAC;UACzBK,IAAI,EAAE,IAAIJ,IAAI,CAACc,IAAI,CAACV,IAAI,CAAC;UACzBH,UAAU,EAAE,IAAI,CAACQ,cAAc,CAACM;SACjC,CAAC,CAAC;MACL,CAAC,CAAC;;EAEN;EAEAC,iBAAiBA,CAACC,WAAgB;IAChC,MAAMC,KAAK,GAAG,IAAI,CAACpB,YAAY,CAACqB,OAAO,CAACF,WAAW,CAAC;IACpD,IAAIC,KAAK,KAAK,CAAC,CAAC,EAAE;MAChB,IAAI,CAACpB,YAAY,CAACsB,MAAM,CAACF,KAAK,EAAE,CAAC,CAAC;;EAEtC;EAEAG,eAAeA,CAACJ,WAAgB;IAC9B;IACAK,OAAO,CAACC,GAAG,CAAC,mBAAmB,EAAEN,WAAW,CAAC;EAC/C;EAEAO,kBAAkBA,CAAA;IAChB,MAAMC,OAAO,GAAG,IAAIzB,IAAI,CAAC,IAAI,CAACG,cAAc,CAACJ,IAAI,CAAC;IAClD,MAAM2B,OAAO,GAAG,IAAI1B,IAAI,CAAC,IAAI,CAACG,cAAc,CAACC,IAAI,CAAC;IAClD,IAAI,CAACuB,KAAK,CAACF,OAAO,CAACG,OAAO,EAAE,CAAC,IAAI,CAACD,KAAK,CAACD,OAAO,CAACE,OAAO,EAAE,CAAC,IAAI,IAAI,CAACnB,cAAc,EAAE;MACjF,IAAI,CAACX,YAAY,CAAC+B,IAAI,CAAC;QACrB9B,IAAI,EAAE0B,OAAO;QACbrB,IAAI,EAAEsB,OAAO;QACbzB,UAAU,EAAE,IAAI,CAACQ,cAAc,CAACM;OACjC,CAAC;MACF,IAAI,CAACZ,cAAc,GAAG;QAAEJ,IAAI,EAAE,EAAE;QAAEK,IAAI,EAAE;MAAE,CAAE;KAC7C,MAAM;MACL0B,KAAK,CAAC,sEAAsE,CAAC;;EAEjF;CACD;AA1DYnC,gBAAgB,GAAAoC,UAAA,EAL5BrC,SAAS,CAAC;EACTsC,QAAQ,EAAE,aAAa;EACvBC,WAAW,EAAE,0BAA0B;EACvCC,SAAS,EAAE,CAAC,yBAAyB;CACtC,CAAC,C,EACWvC,gBAAgB,CA0D5B"},"metadata":{},"sourceType":"module","externalDependencies":[]}