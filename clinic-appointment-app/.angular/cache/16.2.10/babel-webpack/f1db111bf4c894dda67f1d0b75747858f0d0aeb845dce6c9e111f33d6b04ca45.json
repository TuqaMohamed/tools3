{"ast":null,"code":"export {};","map":{"version":3,"names":[],"sources":["D:\\Year4\\Tools 3\\clinic-appointment-app\\src\\app\\doctor\\doctor.component.ts"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { DoctorService } from './doctor.service';\nimport { ActivatedRoute } from '@angular/router';\nimport {} from \n@Component({\n  selector: 'app-doctor',\n  templateUrl: './doctor.component.html',\n  styleUrls: ['./doctor.component.css']\n})\nexport class DoctorComponent implements OnInit{\n  appointments: any[] = [];\n  showMessagesDropdown: boolean = false;\n  doctorMessages: string[] = [\n  'ReservationCreated',\n  'ReservationUpdated',\n  'ReservationCancelled'\n]; \n  id: any;\n  newAppointment: { date: string, time: string } = { date: '', time: '' };\n  constructor(private doctorService: DoctorService,private route: ActivatedRoute) { }\n  ngOnInit() {\n    this.route.params.subscribe(params=>\n      {this.id= params['id'];}\n      );\n      this.loadDoctorSlots();\n\n  }\n  loadDoctorSlots() {\n    const doctorId = this.id;\n    console.log(doctorId);\n    this.DoctorService.getAllSlots(this.id).subscribe(\n      (response) => {\n        console.log('Slots successfully retrieved:', response);\n        this.slots = response;\n      },\n      (error) => {\n        console.error('Error fetching doctor slots:', error);\n        this.toastr.error('Failed to fetch doctor slots. Please try again later.', 'Error');\n      }\n    );\n  }\n  toggleMessagesDropdown() \n  {\n    this.showMessagesDropdown = !this.showMessagesDropdown;\n  }\n  \n  fetchDoctorMessages() \n  {\n    this.doctorMessages = ['Message 1', 'Message 2', 'Message 3'];\n  }\n\n  editAppointment(appointment: any) \n  {\n    console.log('Edit appointment:', appointment);\n  }\n\n  cancelAppointment(appointment: any) \n  {\n    const index = this.appointments.indexOf(appointment);\n    if (index !== -1) {\n      this.appointments.splice(index, 1);\n    }\n  }\n  addAppointmentAndSetSchedule() {\n    const parsedTime = this.parseTimeString(this.newAppointment.time);\n    if (parsedTime) {\n      const newAppointment = {\n        date: new Date(this.newAppointment.date),\n        time: parsedTime\n      };\n\n      this.appointments.push(newAppointment);\n\n      this.doctorService.setDoctorSchedule(newAppointment).subscribe(\n        (response) => {\n          console.log('Appointment added and schedule set successfully', response);\n        },\n        (error) => {\n          console.error('Error adding appointment and setting schedule:', error);\n        }\n      );\n\n      this.newAppointment = { date: '', time: '' };\n    } else {\n      console.error('Invalid time format');\n    }\n  }\n    private parseTimeString(timeString: string): Date | null \n  {\n    const [hoursStr, minutesStr] = timeString.split(':');\n    const hours = parseInt(hoursStr, 10);\n    const minutes = parseInt(minutesStr, 10);\n  \n    if (isNaN(hours) || isNaN(minutes)) {\n      console.error('Invalid time format. Please enter a valid time.');\n      return null;\n    }\n    const date = new Date();\n    date.setHours(hours, minutes, 0, 0);\n    return date;\n  }\n  \n}\n"],"mappings":""},"metadata":{},"sourceType":"module","externalDependencies":[]}