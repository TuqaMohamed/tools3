{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nexport let PatientComponent = class PatientComponent {\n  constructor(doctorService, route, patientService) {\n    this.doctorService = doctorService;\n    this.route = route;\n    this.patientService = patientService;\n    this.doctors = [];\n    this.appointments = [];\n    this.newAppointment = {\n      date: '',\n      time: ''\n    };\n    this.availableSlots = [];\n    this.editedAppointment = null;\n    this.loadDoctors();\n    this.route.params.subscribe(params => {\n      this.patientID = params['id'];\n    });\n    console.log(this.patientID);\n  }\n  loadDoctors() {\n    this.doctorService.getDoctors().subscribe(doctors => {\n      this.doctors = doctors;\n      console.log('Doctors:', this.doctors);\n    });\n  }\n  loadDoctorSlots() {\n    console.log(this.selectedDoctor);\n    if (this.selectedDoctor) {\n      this.doctorService.getDoctorSlots(this.selectedDoctor._id).subscribe(slots => {\n        this.availableSlots = slots;\n        console.log(this.availableSlots);\n      });\n    }\n  }\n  cancelAppointment(appointment) {\n    const index = this.appointments.indexOf(appointment);\n    if (index !== -1) {\n      this.appointments.splice(index, 1);\n    }\n  }\n  editAppointment(appointment) {\n    this.editedAppointment = {\n      ...appointment\n    };\n    this.editedAppointment.time = this.formatTime(this.editedAppointment.time);\n  }\n  saveEditedAppointment() {\n    if (this.editedAppointment) {\n      this.editedAppointment.time = this.parseTimeString(this.editedAppointment.time);\n      const index = this.appointments.findIndex(appointment => appointment.id === this.editedAppointment.id);\n      if (index !== -1) {\n        this.appointments[index] = {\n          ...this.editedAppointment\n        };\n        this.editedAppointment = null;\n      }\n    }\n  }\n  formatTime(time) {\n    const options = {\n      hour: 'numeric',\n      minute: 'numeric',\n      hour12: true\n    };\n    return new Intl.DateTimeFormat('en-US', options).format(time);\n  }\n  parseTimeString(timeString) {\n    const [hoursStr, minutesStr] = timeString.split(':');\n    const hours = parseInt(hoursStr, 10);\n    const minutes = parseInt(minutesStr, 10);\n    if (isNaN(hours) || isNaN(minutes)) {\n      console.error('Invalid time format. Please enter a valid time.');\n      return null;\n    }\n    const date = new Date();\n    date.setHours(hours, minutes, 0, 0);\n    return date;\n  }\n  reserveAppointment() {\n    console.log(\"inside the reserve\");\n    console.log(this.selectedSlot.id);\n    console.log(this.patientID);\n    this.patientService.reserveSlot(this.selectedSlot.id, this.patientID).subscribe(reservationResponse => {\n      console.log('Slot reserved successfully:', reservationResponse);\n    }, reservationError => {\n      console.error('Error reserving slot:', reservationError);\n    });\n  }\n};\nPatientComponent = __decorate([Component({\n  selector: 'app-patient',\n  templateUrl: './patient.component.html',\n  styleUrls: ['./patient.component.css']\n})], PatientComponent);","map":{"version":3,"names":["Component","PatientComponent","constructor","doctorService","route","patientService","doctors","appointments","newAppointment","date","time","availableSlots","editedAppointment","loadDoctors","params","subscribe","patientID","console","log","getDoctors","loadDoctorSlots","selectedDoctor","getDoctorSlots","_id","slots","cancelAppointment","appointment","index","indexOf","splice","editAppointment","formatTime","saveEditedAppointment","parseTimeString","findIndex","id","options","hour","minute","hour12","Intl","DateTimeFormat","format","timeString","hoursStr","minutesStr","split","hours","parseInt","minutes","isNaN","error","Date","setHours","reserveAppointment","selectedSlot","reserveSlot","reservationResponse","reservationError","__decorate","selector","templateUrl","styleUrls"],"sources":["D:\\Year4\\Tools 3\\clinic-appointment-app\\src\\app\\patient\\patient.component.ts"],"sourcesContent":["import { Component } from '@angular/core';\nimport { DoctorService } from '../doctor/doctor.service';\nimport { PatientService } from './patient.service';\nimport { ActivatedRoute } from '@angular/router';\n\ninterface Doctor {\n  id: string;\n  name: string;\n}\n\ninterface Slot {\n  time: string;\n  date:string;\n  id:string;\n}\n@Component({\n  selector: 'app-patient',\n  templateUrl: './patient.component.html',\n  styleUrls: ['./patient.component.css']\n})\nexport class PatientComponent {\n  selectedDoctor: any;\n  doctors: Doctor[] = [];\n  appointments: any[] = [];\n  newAppointment: { date: string, time: string, slot?: Slot } = { date: '', time: ''};\n  availableSlots: Slot[] = [];\n  editedAppointment: any | null = null;\n  selectedSlot: any ;\n  patientService: any;\n  patientID :any;\n  constructor(private doctorService: DoctorService , private route: ActivatedRoute,private patientService:P) {\n    this.loadDoctors();\n    this.route.params.subscribe(params => {\n      this.patientID = params['id'];\n    });\n    console.log(this.patientID);\n  }\nloadDoctors() {\n    this.doctorService.getDoctors().subscribe((doctors: Doctor[]) => {\n    this.doctors = doctors;\n    console.log('Doctors:', this.doctors); \n  });\n  }\n\nloadDoctorSlots() {\n    console.log(this.selectedDoctor)\n    if (this.selectedDoctor) {\n      this.doctorService.getDoctorSlots(this.selectedDoctor._id).subscribe((slots: Slot[]) => {\n        this.availableSlots = slots;\n      console.log(this.availableSlots);\n      });\n      \n    }\n  }\ncancelAppointment(appointment: any) {\n    const index = this.appointments.indexOf(appointment);\n    if (index !== -1) {\n      this.appointments.splice(index, 1);\n    }\n  }\n\neditAppointment(appointment: any) {\n  this.editedAppointment = { ...appointment };\n  this.editedAppointment.time = this.formatTime(this.editedAppointment.time);\n}\n\nsaveEditedAppointment() {\n  if (this.editedAppointment) {\n    this.editedAppointment.time = this.parseTimeString(this.editedAppointment.time);\n    const index = this.appointments.findIndex(appointment => appointment.id === this.editedAppointment.id);\n    if (index !== -1) {\n      this.appointments[index] = { ...this.editedAppointment };\n      this.editedAppointment = null; \n    }\n  }\n}\n\nformatTime(time: Date): string {\n  const options: Intl.DateTimeFormatOptions = { hour: 'numeric', minute: 'numeric', hour12: true };\n  return new Intl.DateTimeFormat('en-US', options).format(time);\n}\n\nprivate parseTimeString(timeString: string): Date | null {\n  const [hoursStr, minutesStr] = timeString.split(':');\n  const hours = parseInt(hoursStr, 10);\n  const minutes = parseInt(minutesStr, 10);\n\n  if (isNaN(hours) || isNaN(minutes)) {\n    console.error('Invalid time format. Please enter a valid time.');\n    return null;\n  }\n\n  const date = new Date();\n  date.setHours(hours, minutes, 0, 0);\n\n  return date;\n}\n\nreserveAppointment() {\n  console.log(\"inside the reserve\");\n    console.log(this.selectedSlot.id);\n    console.log(this.patientID)\n    this.patientService.reserveSlot(this.selectedSlot.id, this.patientID)\n            .subscribe(\n              (reservationResponse: any) => {\n                console.log('Slot reserved successfully:', reservationResponse);\n              },\n              (reservationError: any) => {\n                console.error('Error reserving slot:', reservationError);\n              }\n            );\n}\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}