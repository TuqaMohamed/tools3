{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"../doctor/doctor.service\";\nimport * as i2 from \"@angular/router\";\nimport * as i3 from \"@angular/common\";\nimport * as i4 from \"@angular/forms\";\nfunction PatientComponent_tr_17_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r6 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"tr\")(1, \"td\");\n    i0.ɵɵtext(2);\n    i0.ɵɵpipe(3, \"date\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(4, \"td\");\n    i0.ɵɵtext(5);\n    i0.ɵɵpipe(6, \"date\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(7, \"td\");\n    i0.ɵɵtext(8);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(9, \"td\")(10, \"button\", 8);\n    i0.ɵɵlistener(\"click\", function PatientComponent_tr_17_Template_button_click_10_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r6);\n      const appointment_r4 = restoredCtx.$implicit;\n      const ctx_r5 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r5.editAppointment(appointment_r4));\n    });\n    i0.ɵɵtext(11, \"Edit\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(12, \"button\", 8);\n    i0.ɵɵlistener(\"click\", function PatientComponent_tr_17_Template_button_click_12_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r6);\n      const appointment_r4 = restoredCtx.$implicit;\n      const ctx_r7 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r7.cancelAppointment(appointment_r4));\n    });\n    i0.ɵɵtext(13, \"Cancel\");\n    i0.ɵɵelementEnd()()();\n  }\n  if (rf & 2) {\n    const appointment_r4 = ctx.$implicit;\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(i0.ɵɵpipeBind2(3, 3, appointment_r4.date, \"dd/MM/yy\"));\n    i0.ɵɵadvance(3);\n    i0.ɵɵtextInterpolate(i0.ɵɵpipeBind2(6, 6, appointment_r4.time, \"hh:mm a\"));\n    i0.ɵɵadvance(3);\n    i0.ɵɵtextInterpolate(appointment_r4.doctorName);\n  }\n}\nfunction PatientComponent_div_18_option_13_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"option\", 16);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const doctor_r9 = ctx.$implicit;\n    i0.ɵɵproperty(\"ngValue\", doctor_r9.name);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(doctor_r9.name);\n  }\n}\nfunction PatientComponent_div_18_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r11 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"div\")(1, \"h3\");\n    i0.ɵɵtext(2, \"Edit Appointment\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"form\")(4, \"label\", 9);\n    i0.ɵɵtext(5, \"Date:\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(6, \"input\", 10);\n    i0.ɵɵlistener(\"ngModelChange\", function PatientComponent_div_18_Template_input_ngModelChange_6_listener($event) {\n      i0.ɵɵrestoreView(_r11);\n      const ctx_r10 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r10.editedAppointment.date = $event);\n    });\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(7, \"label\", 11);\n    i0.ɵɵtext(8, \"Time:\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(9, \"input\", 12);\n    i0.ɵɵlistener(\"ngModelChange\", function PatientComponent_div_18_Template_input_ngModelChange_9_listener($event) {\n      i0.ɵɵrestoreView(_r11);\n      const ctx_r12 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r12.editedAppointment.time = $event);\n    });\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(10, \"label\", 13);\n    i0.ɵɵtext(11, \"Doctor:\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(12, \"select\", 14);\n    i0.ɵɵlistener(\"ngModelChange\", function PatientComponent_div_18_Template_select_ngModelChange_12_listener($event) {\n      i0.ɵɵrestoreView(_r11);\n      const ctx_r13 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r13.editedAppointment.doctorName = $event);\n    });\n    i0.ɵɵtemplate(13, PatientComponent_div_18_option_13_Template, 2, 2, \"option\", 6);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(14, \"button\", 15);\n    i0.ɵɵlistener(\"click\", function PatientComponent_div_18_Template_button_click_14_listener() {\n      i0.ɵɵrestoreView(_r11);\n      const ctx_r14 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r14.saveEditedAppointment());\n    });\n    i0.ɵɵtext(15, \"Save\");\n    i0.ɵɵelementEnd()()();\n  }\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(6);\n    i0.ɵɵproperty(\"ngModel\", ctx_r1.editedAppointment.date);\n    i0.ɵɵadvance(3);\n    i0.ɵɵproperty(\"ngModel\", ctx_r1.editedAppointment.time);\n    i0.ɵɵadvance(3);\n    i0.ɵɵproperty(\"ngModel\", ctx_r1.editedAppointment.doctorName);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r1.doctors);\n  }\n}\nfunction PatientComponent_option_23_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"option\", 16);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const doctor_r15 = ctx.$implicit;\n    i0.ɵɵproperty(\"ngValue\", doctor_r15);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(doctor_r15.name);\n  }\n}\nfunction PatientComponent_div_24_option_4_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"option\", 16);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const slot_r17 = ctx.$implicit;\n    i0.ɵɵproperty(\"ngValue\", slot_r17);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate2(\"\", slot_r17.date, \" - \", slot_r17.time, \"\");\n  }\n}\nfunction PatientComponent_div_24_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r19 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"div\", 3)(1, \"label\", 17);\n    i0.ɵɵtext(2, \"Select Slot:\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"select\", 18);\n    i0.ɵɵlistener(\"ngModelChange\", function PatientComponent_div_24_Template_select_ngModelChange_3_listener($event) {\n      i0.ɵɵrestoreView(_r19);\n      const ctx_r18 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r18.newAppointment = $event);\n    });\n    i0.ɵɵtemplate(4, PatientComponent_div_24_option_4_Template, 2, 3, \"option\", 6);\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const ctx_r3 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(3);\n    i0.ɵɵproperty(\"ngModel\", ctx_r3.newAppointment);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r3.availableSlots);\n  }\n}\nexport class PatientComponent {\n  constructor(doctorService, route) {\n    this.doctorService = doctorService;\n    this.route = route;\n    this.doctors = [];\n    this.appointments = [];\n    this.newAppointment = {\n      date: '',\n      time: ''\n    };\n    this.availableSlots = [];\n    this.editedAppointment = null;\n    this.selectedSlot = null;\n    this.selectedPatientId = null;\n    this.selectedSlotId = null;\n    this.loadDoctors();\n  }\n  selectSlot(slot) {\n    this.selectedSlot = slot;\n  }\n  selectPatient(patientId) {\n    this.selectedPatientId = patientId;\n  }\n  loadDoctors() {\n    this.doctorService.getDoctors().subscribe(doctors => {\n      this.doctors = doctors;\n      console.log('Doctors:', this.doctors);\n    });\n  }\n  loadDoctorSlots() {\n    console.log(this.selectedDoctor);\n    if (this.selectedDoctor) {\n      this.doctorService.getDoctorSlots(this.selectedDoctor._id).subscribe(slots => {\n        this.availableSlots = slots;\n      });\n    }\n  }\n  cancelAppointment(appointment) {\n    const index = this.appointments.indexOf(appointment);\n    if (index !== -1) {\n      this.appointments.splice(index, 1);\n    }\n  }\n  editAppointment(appointment) {\n    this.editedAppointment = {\n      ...appointment\n    };\n    this.editedAppointment.time = this.formatTime(this.editedAppointment.time);\n  }\n  saveEditedAppointment() {\n    if (this.editedAppointment) {\n      this.editedAppointment.time = this.parseTimeString(this.editedAppointment.time);\n      const index = this.appointments.findIndex(appointment => appointment.id === this.editedAppointment.id);\n      if (index !== -1) {\n        this.appointments[index] = {\n          ...this.editedAppointment\n        };\n        this.editedAppointment = null;\n      }\n    }\n  }\n  formatTime(time) {\n    const options = {\n      hour: 'numeric',\n      minute: 'numeric',\n      hour12: true\n    };\n    return new Intl.DateTimeFormat('en-US', options).format(time);\n  }\n  parseTimeString(timeString) {\n    const [hoursStr, minutesStr] = timeString.split(':');\n    const hours = parseInt(hoursStr, 10);\n    const minutes = parseInt(minutesStr, 10);\n    if (isNaN(hours) || isNaN(minutes)) {\n      console.error('Invalid time format. Please enter a valid time.');\n      return null;\n    }\n    const date = new Date();\n    date.setHours(hours, minutes, 0, 0);\n    return date;\n  }\n  reserveAppointment() {\n    // Call the backend SlotIDHandler to get the slot ID\n    this.selectSlot = Response;\n    this.doctorService.getSlotId(selectedSlot.date, this.selectedSlot.time, this.selectedDoctor.name).subscribe(response => {\n      // Assuming the response contains the slot ID\n      this.selectedSlotId = response.slotID;\n      // Now you can reserve the slot using the obtained slot ID and patient ID\n      this.patientService.reserveSlot(this.selectedSlotId, this.selectedPatientId).subscribe(reservationResponse => {\n        console.log('Slot reserved successfully:', reservationResponse);\n        // You may want to update your UI or perform other actions upon successful reservation.\n      }, reservationError => {\n        console.error('Error reserving slot:', reservationError);\n        // Handle errors gracefully, e.g., show an error message to the user.\n      });\n    }, error => {\n      console.error('Error getting slot ID:', error);\n      // Handle errors gracefully, e.g., show an error message to the user.\n    });\n  }\n  static #_ = this.ɵfac = function PatientComponent_Factory(t) {\n    return new (t || PatientComponent)(i0.ɵɵdirectiveInject(i1.DoctorService), i0.ɵɵdirectiveInject(i2.ActivatedRoute));\n  };\n  static #_2 = this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: PatientComponent,\n    selectors: [[\"app-patient\"]],\n    decls: 27,\n    vars: 5,\n    consts: [[1, \"patient-container\"], [4, \"ngFor\", \"ngForOf\"], [4, \"ngIf\"], [1, \"form-group\"], [\"for\", \"doctor\"], [\"id\", \"doctor\", \"name\", \"doctor\", \"required\", \"\", 3, \"ngModel\", \"ngModelChange\", \"change\"], [3, \"ngValue\", 4, \"ngFor\", \"ngForOf\"], [\"class\", \"form-group\", 4, \"ngIf\"], [3, \"click\"], [\"for\", \"editedDate\"], [\"type\", \"date\", \"id\", \"editedDate\", \"name\", \"editedDate\", \"required\", \"\", 3, \"ngModel\", \"ngModelChange\"], [\"for\", \"editedTime\"], [\"type\", \"time\", \"id\", \"editedTime\", \"name\", \"editedTime\", \"required\", \"\", 3, \"ngModel\", \"ngModelChange\"], [\"for\", \"editedDoctor\"], [\"id\", \"editedDoctor\", \"name\", \"editedDoctor\", \"required\", \"\", 3, \"ngModel\", \"ngModelChange\"], [\"type\", \"button\", 3, \"click\"], [3, \"ngValue\"], [\"for\", \"slot\"], [\"id\", \"slot\", \"name\", \"slot\", \"required\", \"\", 3, \"ngModel\", \"ngModelChange\"]],\n    template: function PatientComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\", 0)(1, \"h2\");\n        i0.ɵɵtext(2, \"Hello, Patient\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(3, \"h3\");\n        i0.ɵɵtext(4, \"My Appointments\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(5, \"table\")(6, \"thead\")(7, \"tr\")(8, \"th\");\n        i0.ɵɵtext(9, \"Date\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(10, \"th\");\n        i0.ɵɵtext(11, \"Time\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(12, \"th\");\n        i0.ɵɵtext(13, \"Doctor's Name\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(14, \"th\");\n        i0.ɵɵtext(15, \"Actions\");\n        i0.ɵɵelementEnd()()();\n        i0.ɵɵelementStart(16, \"tbody\");\n        i0.ɵɵtemplate(17, PatientComponent_tr_17_Template, 14, 9, \"tr\", 1);\n        i0.ɵɵelementEnd()();\n        i0.ɵɵtemplate(18, PatientComponent_div_18_Template, 16, 4, \"div\", 2);\n        i0.ɵɵelementStart(19, \"div\", 3)(20, \"label\", 4);\n        i0.ɵɵtext(21, \"Select Doctor:\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(22, \"select\", 5);\n        i0.ɵɵlistener(\"ngModelChange\", function PatientComponent_Template_select_ngModelChange_22_listener($event) {\n          return ctx.selectedDoctor = $event;\n        })(\"change\", function PatientComponent_Template_select_change_22_listener() {\n          return ctx.loadDoctorSlots();\n        });\n        i0.ɵɵtemplate(23, PatientComponent_option_23_Template, 2, 2, \"option\", 6);\n        i0.ɵɵelementEnd()();\n        i0.ɵɵtemplate(24, PatientComponent_div_24_Template, 5, 2, \"div\", 7);\n        i0.ɵɵelementStart(25, \"button\", 8);\n        i0.ɵɵlistener(\"click\", function PatientComponent_Template_button_click_25_listener() {\n          return ctx.reserveAppointment();\n        });\n        i0.ɵɵtext(26, \"Reserve\");\n        i0.ɵɵelementEnd()();\n      }\n      if (rf & 2) {\n        i0.ɵɵadvance(17);\n        i0.ɵɵproperty(\"ngForOf\", ctx.appointments);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.editedAppointment);\n        i0.ɵɵadvance(4);\n        i0.ɵɵproperty(\"ngModel\", ctx.selectedDoctor);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngForOf\", ctx.doctors);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.selectedDoctor);\n      }\n    },\n    dependencies: [i3.NgForOf, i3.NgIf, i4.ɵNgNoValidate, i4.NgSelectOption, i4.ɵNgSelectMultipleOption, i4.DefaultValueAccessor, i4.SelectControlValueAccessor, i4.NgControlStatus, i4.NgControlStatusGroup, i4.RequiredValidator, i4.NgModel, i4.NgForm, i3.DatePipe],\n    styles: [\".patient-container[_ngcontent-%COMP%] {\\n    width: 80%;\\n    margin: 0 auto;\\n    padding: 20px;\\n  }\\n  \\n  table[_ngcontent-%COMP%] {\\n    width: 100%;\\n    border-collapse: collapse;\\n    margin-bottom: 20px;\\n  }\\n  \\n  table[_ngcontent-%COMP%], th[_ngcontent-%COMP%], td[_ngcontent-%COMP%] {\\n    border: 2px solid #ccc;\\n    text-align: left;\\n  }\\n  \\n  th[_ngcontent-%COMP%], td[_ngcontent-%COMP%] {\\n    padding: 10px;\\n  }\\n  \\n  .form-group[_ngcontent-%COMP%] {\\n    margin-bottom: 15px;\\n  }\\n  \\n  input[type=\\\"date\\\"][_ngcontent-%COMP%], input[type=\\\"time\\\"][_ngcontent-%COMP%], select[_ngcontent-%COMP%] {\\n    width: calc(100% - 20px);\\n    padding: 10px;\\n    font-size: 16px;\\n    border: 2px solid #ccc;\\n    border-radius: 5px;\\n  }\\n  \\n  button[_ngcontent-%COMP%] {\\n    padding: 10px 20px;\\n    font-size: 16px;\\n    border: none;\\n    background-color: #4caf50;\\n    color: white;\\n    cursor: pointer;\\n    border-radius: 5px;\\n    margin-right: 10px; \\n  }\\n  \\n  button[_ngcontent-%COMP%]:last-child {\\n    margin-right: 0; \\n  }\\n  \\n  button[_ngcontent-%COMP%]:hover {\\n    background-color: #45a049;\\n  }\\n  \\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8uL3NyYy9hcHAvcGF0aWVudC9wYXRpZW50LmNvbXBvbmVudC5jc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUNBO0lBQ0ksVUFBVTtJQUNWLGNBQWM7SUFDZCxhQUFhO0VBQ2Y7O0VBRUE7SUFDRSxXQUFXO0lBQ1gseUJBQXlCO0lBQ3pCLG1CQUFtQjtFQUNyQjs7RUFFQTtJQUNFLHNCQUFzQjtJQUN0QixnQkFBZ0I7RUFDbEI7O0VBRUE7SUFDRSxhQUFhO0VBQ2Y7O0VBRUE7SUFDRSxtQkFBbUI7RUFDckI7O0VBRUE7OztJQUdFLHdCQUF3QjtJQUN4QixhQUFhO0lBQ2IsZUFBZTtJQUNmLHNCQUFzQjtJQUN0QixrQkFBa0I7RUFDcEI7O0VBRUE7SUFDRSxrQkFBa0I7SUFDbEIsZUFBZTtJQUNmLFlBQVk7SUFDWix5QkFBeUI7SUFDekIsWUFBWTtJQUNaLGVBQWU7SUFDZixrQkFBa0I7SUFDbEIsa0JBQWtCO0VBQ3BCOztFQUVBO0lBQ0UsZUFBZTtFQUNqQjs7RUFFQTtJQUNFLHlCQUF5QjtFQUMzQiIsInNvdXJjZXNDb250ZW50IjpbIlxyXG4ucGF0aWVudC1jb250YWluZXIge1xyXG4gICAgd2lkdGg6IDgwJTtcclxuICAgIG1hcmdpbjogMCBhdXRvO1xyXG4gICAgcGFkZGluZzogMjBweDtcclxuICB9XHJcbiAgXHJcbiAgdGFibGUge1xyXG4gICAgd2lkdGg6IDEwMCU7XHJcbiAgICBib3JkZXItY29sbGFwc2U6IGNvbGxhcHNlO1xyXG4gICAgbWFyZ2luLWJvdHRvbTogMjBweDtcclxuICB9XHJcbiAgXHJcbiAgdGFibGUsIHRoLCB0ZCB7XHJcbiAgICBib3JkZXI6IDJweCBzb2xpZCAjY2NjO1xyXG4gICAgdGV4dC1hbGlnbjogbGVmdDtcclxuICB9XHJcbiAgXHJcbiAgdGgsIHRkIHtcclxuICAgIHBhZGRpbmc6IDEwcHg7XHJcbiAgfVxyXG4gIFxyXG4gIC5mb3JtLWdyb3VwIHtcclxuICAgIG1hcmdpbi1ib3R0b206IDE1cHg7XHJcbiAgfVxyXG4gIFxyXG4gIGlucHV0W3R5cGU9XCJkYXRlXCJdLFxyXG4gIGlucHV0W3R5cGU9XCJ0aW1lXCJdLFxyXG4gIHNlbGVjdCB7XHJcbiAgICB3aWR0aDogY2FsYygxMDAlIC0gMjBweCk7XHJcbiAgICBwYWRkaW5nOiAxMHB4O1xyXG4gICAgZm9udC1zaXplOiAxNnB4O1xyXG4gICAgYm9yZGVyOiAycHggc29saWQgI2NjYztcclxuICAgIGJvcmRlci1yYWRpdXM6IDVweDtcclxuICB9XHJcbiAgXHJcbiAgYnV0dG9uIHtcclxuICAgIHBhZGRpbmc6IDEwcHggMjBweDtcclxuICAgIGZvbnQtc2l6ZTogMTZweDtcclxuICAgIGJvcmRlcjogbm9uZTtcclxuICAgIGJhY2tncm91bmQtY29sb3I6ICM0Y2FmNTA7XHJcbiAgICBjb2xvcjogd2hpdGU7XHJcbiAgICBjdXJzb3I6IHBvaW50ZXI7XHJcbiAgICBib3JkZXItcmFkaXVzOiA1cHg7XHJcbiAgICBtYXJnaW4tcmlnaHQ6IDEwcHg7IFxyXG4gIH1cclxuICBcclxuICBidXR0b246bGFzdC1jaGlsZCB7XHJcbiAgICBtYXJnaW4tcmlnaHQ6IDA7IFxyXG4gIH1cclxuICBcclxuICBidXR0b246aG92ZXIge1xyXG4gICAgYmFja2dyb3VuZC1jb2xvcjogIzQ1YTA0OTtcclxuICB9XHJcbiAgIl0sInNvdXJjZVJvb3QiOiIifQ== */\"]\n  });\n}","map":{"version":3,"names":["i0","ɵɵelementStart","ɵɵtext","ɵɵelementEnd","ɵɵlistener","PatientComponent_tr_17_Template_button_click_10_listener","restoredCtx","ɵɵrestoreView","_r6","appointment_r4","$implicit","ctx_r5","ɵɵnextContext","ɵɵresetView","editAppointment","PatientComponent_tr_17_Template_button_click_12_listener","ctx_r7","cancelAppointment","ɵɵadvance","ɵɵtextInterpolate","ɵɵpipeBind2","date","time","doctorName","ɵɵproperty","doctor_r9","name","PatientComponent_div_18_Template_input_ngModelChange_6_listener","$event","_r11","ctx_r10","editedAppointment","PatientComponent_div_18_Template_input_ngModelChange_9_listener","ctx_r12","PatientComponent_div_18_Template_select_ngModelChange_12_listener","ctx_r13","ɵɵtemplate","PatientComponent_div_18_option_13_Template","PatientComponent_div_18_Template_button_click_14_listener","ctx_r14","saveEditedAppointment","ctx_r1","doctors","doctor_r15","slot_r17","ɵɵtextInterpolate2","PatientComponent_div_24_Template_select_ngModelChange_3_listener","_r19","ctx_r18","newAppointment","PatientComponent_div_24_option_4_Template","ctx_r3","availableSlots","PatientComponent","constructor","doctorService","route","appointments","selectedSlot","selectedPatientId","selectedSlotId","loadDoctors","selectSlot","slot","selectPatient","patientId","getDoctors","subscribe","console","log","loadDoctorSlots","selectedDoctor","getDoctorSlots","_id","slots","appointment","index","indexOf","splice","formatTime","parseTimeString","findIndex","id","options","hour","minute","hour12","Intl","DateTimeFormat","format","timeString","hoursStr","minutesStr","split","hours","parseInt","minutes","isNaN","error","Date","setHours","reserveAppointment","Response","getSlotId","response","slotID","patientService","reserveSlot","reservationResponse","reservationError","_","ɵɵdirectiveInject","i1","DoctorService","i2","ActivatedRoute","_2","selectors","decls","vars","consts","template","PatientComponent_Template","rf","ctx","PatientComponent_tr_17_Template","PatientComponent_div_18_Template","PatientComponent_Template_select_ngModelChange_22_listener","PatientComponent_Template_select_change_22_listener","PatientComponent_option_23_Template","PatientComponent_div_24_Template","PatientComponent_Template_button_click_25_listener"],"sources":["D:\\Year4\\Tools 3\\clinic-appointment-app\\src\\app\\patient\\patient.component.ts","D:\\Year4\\Tools 3\\clinic-appointment-app\\src\\app\\patient\\patient.component.html"],"sourcesContent":["import { Component } from '@angular/core';\nimport { DoctorService } from '../doctor/doctor.service';\nimport { PatientService } from './patient.service';\nimport { ActivatedRoute } from '@angular/router';\n\ninterface Doctor {\n  id: string;\n  name: string;\n}\n\ninterface Slot {\n  time: string;\n  date:string;\n  _id:string;\n}\n@Component({\n  selector: 'app-patient',\n  templateUrl: './patient.component.html',\n  styleUrls: ['./patient.component.css']\n})\nexport class PatientComponent {\n  selectedDoctor: any;\n  doctors: Doctor[] = [];\n  appointments: any[] = [];\n  newAppointment: { date: string, time: string, slot?: Slot } = { date: '', time: ''};\n  availableSlots: Slot[] = [];\n  editedAppointment: any | null = null;\n  selectedSlot: Slot | null = null;\n  selectedPatientId: string | null = null;\n  patientService: any;\n  selectedSlotId: string | null = null;\n  \n  constructor(private doctorService: DoctorService , private route: ActivatedRoute) {\n    this.loadDoctors();\n  }\n  selectSlot(slot: Slot) {\n    this.selectedSlot = slot;\n  }\n  selectPatient(patientId: string) {\n    this.selectedPatientId = patientId;\n  }\nloadDoctors() {\n    this.doctorService.getDoctors().subscribe((doctors: Doctor[]) => {\n    this.doctors = doctors;\n    console.log('Doctors:', this.doctors); \n  });\n  }\n\nloadDoctorSlots() {\n    console.log(this.selectedDoctor)\n    if (this.selectedDoctor) {\n      this.doctorService.getDoctorSlots(this.selectedDoctor._id).subscribe((slots: Slot[]) => {\n        this.availableSlots = slots;\n      });\n    }\n  }\ncancelAppointment(appointment: any) {\n    const index = this.appointments.indexOf(appointment);\n    if (index !== -1) {\n      this.appointments.splice(index, 1);\n    }\n  }\n\neditAppointment(appointment: any) {\n  this.editedAppointment = { ...appointment };\n  this.editedAppointment.time = this.formatTime(this.editedAppointment.time);\n}\n\nsaveEditedAppointment() {\n  if (this.editedAppointment) {\n    this.editedAppointment.time = this.parseTimeString(this.editedAppointment.time);\n    const index = this.appointments.findIndex(appointment => appointment.id === this.editedAppointment.id);\n    if (index !== -1) {\n      this.appointments[index] = { ...this.editedAppointment };\n      this.editedAppointment = null; \n    }\n  }\n}\n\nformatTime(time: Date): string {\n  const options: Intl.DateTimeFormatOptions = { hour: 'numeric', minute: 'numeric', hour12: true };\n  return new Intl.DateTimeFormat('en-US', options).format(time);\n}\n\nprivate parseTimeString(timeString: string): Date | null {\n  const [hoursStr, minutesStr] = timeString.split(':');\n  const hours = parseInt(hoursStr, 10);\n  const minutes = parseInt(minutesStr, 10);\n\n  if (isNaN(hours) || isNaN(minutes)) {\n    console.error('Invalid time format. Please enter a valid time.');\n    return null;\n  }\n\n  const date = new Date();\n  date.setHours(hours, minutes, 0, 0);\n\n  return date;\n}\n\nreserveAppointment() {\n    // Call the backend SlotIDHandler to get the slot ID\n    this.selectSlot=Response\n    this.doctorService.getSlotId(selectedSlot.date, this.selectedSlot.time, this.selectedDoctor.name)\n      .subscribe(\n        (response: any) => {\n          // Assuming the response contains the slot ID\n          this.selectedSlotId = response.slotID;\n\n          // Now you can reserve the slot using the obtained slot ID and patient ID\n          this.patientService.reserveSlot(this.selectedSlotId, this.selectedPatientId)\n            .subscribe(\n              (reservationResponse: any) => {\n                console.log('Slot reserved successfully:', reservationResponse);\n                // You may want to update your UI or perform other actions upon successful reservation.\n              },\n              (reservationError: any) => {\n                console.error('Error reserving slot:', reservationError);\n                // Handle errors gracefully, e.g., show an error message to the user.\n              }\n            );\n        },\n        (error: any) => {\n          console.error('Error getting slot ID:', error);\n          // Handle errors gracefully, e.g., show an error message to the user.\n        }\n      );\n}\n}","<div class=\"patient-container\">\n  <h2>Hello, Patient</h2>\n\n  <h3>My Appointments</h3>\n  <table>\n    \n    <thead>\n      <tr>\n        <th>Date</th>\n        <th>Time</th>\n        <th>Doctor's Name</th>\n        <th>Actions</th>\n      </tr>\n    </thead>\n    \n    <tbody>\n      <tr *ngFor=\"let appointment of appointments\">\n        <td>{{ appointment.date | date:'dd/MM/yy' }}</td>\n        <td>{{ appointment.time | date:'hh:mm a' }}</td>\n        <td>{{ appointment.doctorName }}</td>\n        <td>\n          <button (click)=\"editAppointment(appointment)\">Edit</button>\n          <button (click)=\"cancelAppointment(appointment)\">Cancel</button>\n        </td>\n      </tr>\n    </tbody>\n  </table>\n\n  \n  <div *ngIf=\"editedAppointment\">\n    <h3>Edit Appointment</h3>\n    <form>\n      <label for=\"editedDate\">Date:</label>\n      <input type=\"date\" id=\"editedDate\" [(ngModel)]=\"editedAppointment.date\" name=\"editedDate\" required>\n\n      <label for=\"editedTime\">Time:</label>\n      <input type=\"time\" id=\"editedTime\" [(ngModel)]=\"editedAppointment.time\" name=\"editedTime\" required>\n\n      <label for=\"editedDoctor\">Doctor:</label>\n      <select id=\"editedDoctor\" [(ngModel)]=\"editedAppointment.doctorName\" name=\"editedDoctor\" required>\n        <option *ngFor=\"let doctor of doctors\" [ngValue]=\"doctor.name\">{{ doctor.name }}</option>\n      </select>\n      <button type=\"button\" (click)=\"saveEditedAppointment()\">Save</button>\n    </form>\n  </div>\n\n  <div class=\"form-group\">\n    <label for=\"doctor\">Select Doctor:</label>\n    <select id=\"doctor\" [(ngModel)]=\"selectedDoctor\" name=\"doctor\" required (change)=\" loadDoctorSlots()\">\n      <option *ngFor=\"let doctor of doctors\" [ngValue]=\"doctor\">{{ doctor.name }}</option>\n    </select>\n    \n  </div>\n  <div class=\"form-group\" *ngIf=\"selectedDoctor\">\n    <label for=\"slot\">Select Slot:</label>\n    <select id=\"slot\" [(ngModel)]=\"newAppointment\" name=\"slot\" required>\n      <option *ngFor=\"let slot of availableSlots\" [ngValue]=\"slot\">{{ slot.date }} - {{ slot.time }}</option>\n    </select>\n  </div>\n  <button (click)=\"reserveAppointment()\">Reserve</button>"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}