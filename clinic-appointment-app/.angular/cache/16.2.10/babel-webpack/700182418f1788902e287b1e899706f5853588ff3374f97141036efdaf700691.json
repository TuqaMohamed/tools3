{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"../doctor/doctor.service\";\nimport * as i2 from \"@angular/common\";\nimport * as i3 from \"@angular/forms\";\nfunction PatientComponent_tr_17_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r6 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"tr\")(1, \"td\");\n    i0.ɵɵtext(2);\n    i0.ɵɵpipe(3, \"date\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(4, \"td\");\n    i0.ɵɵtext(5);\n    i0.ɵɵpipe(6, \"date\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(7, \"td\");\n    i0.ɵɵtext(8);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(9, \"td\")(10, \"button\", 8);\n    i0.ɵɵlistener(\"click\", function PatientComponent_tr_17_Template_button_click_10_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r6);\n      const appointment_r4 = restoredCtx.$implicit;\n      const ctx_r5 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r5.editAppointment(appointment_r4));\n    });\n    i0.ɵɵtext(11, \"Edit\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(12, \"button\", 8);\n    i0.ɵɵlistener(\"click\", function PatientComponent_tr_17_Template_button_click_12_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r6);\n      const appointment_r4 = restoredCtx.$implicit;\n      const ctx_r7 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r7.cancelAppointment(appointment_r4));\n    });\n    i0.ɵɵtext(13, \"Cancel\");\n    i0.ɵɵelementEnd()()();\n  }\n  if (rf & 2) {\n    const appointment_r4 = ctx.$implicit;\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(i0.ɵɵpipeBind2(3, 3, appointment_r4.date, \"dd/MM/yy\"));\n    i0.ɵɵadvance(3);\n    i0.ɵɵtextInterpolate(i0.ɵɵpipeBind2(6, 6, appointment_r4.time, \"hh:mm a\"));\n    i0.ɵɵadvance(3);\n    i0.ɵɵtextInterpolate(appointment_r4.doctorName);\n  }\n}\nfunction PatientComponent_div_18_option_13_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"option\", 16);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const doctor_r9 = ctx.$implicit;\n    i0.ɵɵproperty(\"ngValue\", doctor_r9.name);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(doctor_r9.name);\n  }\n}\nfunction PatientComponent_div_18_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r11 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"div\")(1, \"h3\");\n    i0.ɵɵtext(2, \"Edit Appointment\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"form\")(4, \"label\", 9);\n    i0.ɵɵtext(5, \"Date:\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(6, \"input\", 10);\n    i0.ɵɵlistener(\"ngModelChange\", function PatientComponent_div_18_Template_input_ngModelChange_6_listener($event) {\n      i0.ɵɵrestoreView(_r11);\n      const ctx_r10 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r10.editedAppointment.date = $event);\n    });\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(7, \"label\", 11);\n    i0.ɵɵtext(8, \"Time:\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(9, \"input\", 12);\n    i0.ɵɵlistener(\"ngModelChange\", function PatientComponent_div_18_Template_input_ngModelChange_9_listener($event) {\n      i0.ɵɵrestoreView(_r11);\n      const ctx_r12 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r12.editedAppointment.time = $event);\n    });\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(10, \"label\", 13);\n    i0.ɵɵtext(11, \"Doctor:\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(12, \"select\", 14);\n    i0.ɵɵlistener(\"ngModelChange\", function PatientComponent_div_18_Template_select_ngModelChange_12_listener($event) {\n      i0.ɵɵrestoreView(_r11);\n      const ctx_r13 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r13.editedAppointment.doctorName = $event);\n    });\n    i0.ɵɵtemplate(13, PatientComponent_div_18_option_13_Template, 2, 2, \"option\", 6);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(14, \"button\", 15);\n    i0.ɵɵlistener(\"click\", function PatientComponent_div_18_Template_button_click_14_listener() {\n      i0.ɵɵrestoreView(_r11);\n      const ctx_r14 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r14.saveEditedAppointment());\n    });\n    i0.ɵɵtext(15, \"Save\");\n    i0.ɵɵelementEnd()()();\n  }\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(6);\n    i0.ɵɵproperty(\"ngModel\", ctx_r1.editedAppointment.date);\n    i0.ɵɵadvance(3);\n    i0.ɵɵproperty(\"ngModel\", ctx_r1.editedAppointment.time);\n    i0.ɵɵadvance(3);\n    i0.ɵɵproperty(\"ngModel\", ctx_r1.editedAppointment.doctorName);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r1.doctors);\n  }\n}\nfunction PatientComponent_option_25_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"option\", 16);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const doctor_r15 = ctx.$implicit;\n    i0.ɵɵproperty(\"ngValue\", doctor_r15);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(doctor_r15.name);\n  }\n}\nfunction PatientComponent_div_26_option_4_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"option\", 16);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const slot_r17 = ctx.$implicit;\n    i0.ɵɵproperty(\"ngValue\", slot_r17);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate2(\"\", slot_r17.date, \" - \", slot_r17.time, \"\");\n  }\n}\nfunction PatientComponent_div_26_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r19 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"div\", 3)(1, \"label\", 17);\n    i0.ɵɵtext(2, \"Select Slot:\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"select\", 18);\n    i0.ɵɵlistener(\"ngModelChange\", function PatientComponent_div_26_Template_select_ngModelChange_3_listener($event) {\n      i0.ɵɵrestoreView(_r19);\n      const ctx_r18 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r18.newAppointment.slot = $event);\n    });\n    i0.ɵɵtemplate(4, PatientComponent_div_26_option_4_Template, 2, 3, \"option\", 6);\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const ctx_r3 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(3);\n    i0.ɵɵproperty(\"ngModel\", ctx_r3.newAppointment.slot);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r3.availableSlots);\n  }\n}\nexport class PatientComponent {\n  constructor(doctorService) {\n    this.doctorService = doctorService;\n    this.selectedDoctor = null;\n    this.doctors = [{\n      id: 1,\n      name: 'Dr. Smith'\n    }, {\n      id: 2,\n      name: 'Dr. Johnson'\n    }, {\n      id: 3,\n      name: 'Dr. Davis'\n    }];\n    this.appointments = [{\n      date: new Date('2023-11-15T10:00:00'),\n      time: new Date('2023-11-15T10:00:00'),\n      doctorName: 'Dr. Smith'\n    }, {\n      date: new Date('2023-11-16T14:30:00'),\n      time: new Date('2023-11-16T14:30:00'),\n      doctorName: 'Dr. Johnson'\n    }];\n    this.newAppointment = {\n      date: '',\n      time: ''\n    };\n    this.availableSlots = [{\n      date: '2023-11-15',\n      time: '09:00 AM'\n    }, {\n      date: '2023-11-15',\n      time: '10:30 AM'\n    }, {\n      date: '2023-11-16',\n      time: '01:00 PM'\n    }];\n    this.editedAppointment = null;\n    this.loadDoctors();\n  }\n  loadDoctors() {\n    this.doctorService.getDoctors().subscribe(doctors => {\n      this.doctors = doctors;\n      console.log('Doctors:', this.doctors); // Log the doctors array to the console\n    });\n  }\n\n  loadDoctorSlots() {\n    if (this.selectedDoctor) {\n      this.doctorService.getDoctorSlots(this.selectedDoctor.id.toString()).subscribe(slots => {\n        this.availableSlots = slots;\n      });\n    }\n  }\n  cancelAppointment(appointment) {\n    const index = this.appointments.indexOf(appointment);\n    if (index !== -1) {\n      this.appointments.splice(index, 1);\n    }\n  }\n  editAppointment(appointment) {\n    // Save the edited appointment for later use\n    this.editedAppointment = {\n      ...appointment\n    };\n  }\n  saveEditedAppointment() {\n    if (this.editedAppointment) {\n      // Update the original appointment with the edited values\n      const index = this.appointments.findIndex(appointment => appointment.id === this.editedAppointment.id);\n      if (index !== -1) {\n        this.appointments[index] = {\n          ...this.editedAppointment\n        };\n        this.editedAppointment = null; // Clear the edited appointment\n      }\n    }\n  }\n\n  reserveAppointment() {\n    console.log('here');\n    if (this.selectedDoctor && this.newAppointment.date && this.newAppointment.time) {\n      const newAppointment = {\n        date: this.newAppointment.date,\n        time: this.newAppointment.time,\n        doctorName: this.selectedDoctor.name\n      };\n      this.appointments.push(newAppointment);\n      console.log('New Appointment:', newAppointment); // Log the new appointment to the console\n      // Reset the form fields\n      this.newAppointment = {\n        date: '',\n        time: ''\n      };\n      this.selectedDoctor = null;\n    }\n  }\n  static #_ = this.ɵfac = function PatientComponent_Factory(t) {\n    return new (t || PatientComponent)(i0.ɵɵdirectiveInject(i1.DoctorService));\n  };\n  static #_2 = this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: PatientComponent,\n    selectors: [[\"app-patient\"]],\n    decls: 29,\n    vars: 5,\n    consts: [[1, \"patient-container\"], [4, \"ngFor\", \"ngForOf\"], [4, \"ngIf\"], [1, \"form-group\"], [\"for\", \"doctor\"], [\"id\", \"doctor\", \"name\", \"doctor\", \"required\", \"\", 3, \"ngModel\", \"ngModelChange\"], [3, \"ngValue\", 4, \"ngFor\", \"ngForOf\"], [\"class\", \"form-group\", 4, \"ngIf\"], [3, \"click\"], [\"for\", \"editedDate\"], [\"type\", \"date\", \"id\", \"editedDate\", \"name\", \"editedDate\", \"required\", \"\", 3, \"ngModel\", \"ngModelChange\"], [\"for\", \"editedTime\"], [\"type\", \"time\", \"id\", \"editedTime\", \"name\", \"editedTime\", \"required\", \"\", 3, \"ngModel\", \"ngModelChange\"], [\"for\", \"editedDoctor\"], [\"id\", \"editedDoctor\", \"name\", \"editedDoctor\", \"required\", \"\", 3, \"ngModel\", \"ngModelChange\"], [\"type\", \"button\", 3, \"click\"], [3, \"ngValue\"], [\"for\", \"slot\"], [\"id\", \"slot\", \"name\", \"slot\", \"required\", \"\", 3, \"ngModel\", \"ngModelChange\"]],\n    template: function PatientComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\", 0)(1, \"h2\");\n        i0.ɵɵtext(2, \"Hello, Patient\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(3, \"h3\");\n        i0.ɵɵtext(4, \"My Appointments\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(5, \"table\")(6, \"thead\")(7, \"tr\")(8, \"th\");\n        i0.ɵɵtext(9, \"Date\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(10, \"th\");\n        i0.ɵɵtext(11, \"Time\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(12, \"th\");\n        i0.ɵɵtext(13, \"Doctor's Name\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(14, \"th\");\n        i0.ɵɵtext(15, \"Actions\");\n        i0.ɵɵelementEnd()()();\n        i0.ɵɵelementStart(16, \"tbody\");\n        i0.ɵɵtemplate(17, PatientComponent_tr_17_Template, 14, 9, \"tr\", 1);\n        i0.ɵɵelementEnd()();\n        i0.ɵɵtemplate(18, PatientComponent_div_18_Template, 16, 4, \"div\", 2);\n        i0.ɵɵelementStart(19, \"h3\");\n        i0.ɵɵtext(20, \"Create New Appointment\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(21, \"div\", 3)(22, \"label\", 4);\n        i0.ɵɵtext(23, \"Select Doctor:\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(24, \"select\", 5);\n        i0.ɵɵlistener(\"ngModelChange\", function PatientComponent_Template_select_ngModelChange_24_listener($event) {\n          return ctx.selectedDoctor = $event;\n        });\n        i0.ɵɵtemplate(25, PatientComponent_option_25_Template, 2, 2, \"option\", 6);\n        i0.ɵɵelementEnd()();\n        i0.ɵɵtemplate(26, PatientComponent_div_26_Template, 5, 2, \"div\", 7);\n        i0.ɵɵelementStart(27, \"button\", 8);\n        i0.ɵɵlistener(\"click\", function PatientComponent_Template_button_click_27_listener() {\n          return ctx.reserveAppointment();\n        });\n        i0.ɵɵtext(28, \"Reserve\");\n        i0.ɵɵelementEnd()();\n      }\n      if (rf & 2) {\n        i0.ɵɵadvance(17);\n        i0.ɵɵproperty(\"ngForOf\", ctx.appointments);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.editedAppointment);\n        i0.ɵɵadvance(6);\n        i0.ɵɵproperty(\"ngModel\", ctx.selectedDoctor);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngForOf\", ctx.doctors);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.selectedDoctor);\n      }\n    },\n    dependencies: [i2.NgForOf, i2.NgIf, i3.ɵNgNoValidate, i3.NgSelectOption, i3.ɵNgSelectMultipleOption, i3.DefaultValueAccessor, i3.SelectControlValueAccessor, i3.NgControlStatus, i3.NgControlStatusGroup, i3.RequiredValidator, i3.NgModel, i3.NgForm, i2.DatePipe],\n    styles: [\"\\n\\n\\n.patient-container[_ngcontent-%COMP%] {\\n    width: 80%;\\n    margin: 0 auto;\\n    padding: 20px;\\n  }\\n  \\n  table[_ngcontent-%COMP%] {\\n    width: 100%;\\n    border-collapse: collapse;\\n    margin-bottom: 20px;\\n  }\\n  \\n  table[_ngcontent-%COMP%], th[_ngcontent-%COMP%], td[_ngcontent-%COMP%] {\\n    border: 2px solid #ccc;\\n    text-align: left;\\n  }\\n  \\n  th[_ngcontent-%COMP%], td[_ngcontent-%COMP%] {\\n    padding: 10px;\\n  }\\n  \\n  .form-group[_ngcontent-%COMP%] {\\n    margin-bottom: 15px;\\n  }\\n  \\n  input[type=\\\"date\\\"][_ngcontent-%COMP%], input[type=\\\"time\\\"][_ngcontent-%COMP%], select[_ngcontent-%COMP%] {\\n    width: calc(100% - 20px);\\n    padding: 10px;\\n    font-size: 16px;\\n    border: 2px solid #ccc;\\n    border-radius: 5px;\\n  }\\n  \\n  button[_ngcontent-%COMP%] {\\n    padding: 10px 20px;\\n    font-size: 16px;\\n    border: none;\\n    background-color: #4caf50;\\n    color: white;\\n    cursor: pointer;\\n    border-radius: 5px;\\n    margin-right: 10px; \\n  }\\n  \\n  button[_ngcontent-%COMP%]:last-child {\\n    margin-right: 0; \\n  }\\n  \\n  button[_ngcontent-%COMP%]:hover {\\n    background-color: #45a049;\\n  }\\n  \\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8uL3NyYy9hcHAvcGF0aWVudC9wYXRpZW50LmNvbXBvbmVudC5jc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsMEJBQTBCOztBQUUxQjtJQUNJLFVBQVU7SUFDVixjQUFjO0lBQ2QsYUFBYTtFQUNmOztFQUVBO0lBQ0UsV0FBVztJQUNYLHlCQUF5QjtJQUN6QixtQkFBbUI7RUFDckI7O0VBRUE7SUFDRSxzQkFBc0I7SUFDdEIsZ0JBQWdCO0VBQ2xCOztFQUVBO0lBQ0UsYUFBYTtFQUNmOztFQUVBO0lBQ0UsbUJBQW1CO0VBQ3JCOztFQUVBOzs7SUFHRSx3QkFBd0I7SUFDeEIsYUFBYTtJQUNiLGVBQWU7SUFDZixzQkFBc0I7SUFDdEIsa0JBQWtCO0VBQ3BCOztFQUVBO0lBQ0Usa0JBQWtCO0lBQ2xCLGVBQWU7SUFDZixZQUFZO0lBQ1oseUJBQXlCO0lBQ3pCLFlBQVk7SUFDWixlQUFlO0lBQ2Ysa0JBQWtCO0lBQ2xCLGtCQUFrQjtFQUNwQjs7RUFFQTtJQUNFLGVBQWU7RUFDakI7O0VBRUE7SUFDRSx5QkFBeUI7RUFDM0IiLCJzb3VyY2VzQ29udGVudCI6WyIvKiBwYXRpZW50LmNvbXBvbmVudC5jc3MgKi9cclxuXHJcbi5wYXRpZW50LWNvbnRhaW5lciB7XHJcbiAgICB3aWR0aDogODAlO1xyXG4gICAgbWFyZ2luOiAwIGF1dG87XHJcbiAgICBwYWRkaW5nOiAyMHB4O1xyXG4gIH1cclxuICBcclxuICB0YWJsZSB7XHJcbiAgICB3aWR0aDogMTAwJTtcclxuICAgIGJvcmRlci1jb2xsYXBzZTogY29sbGFwc2U7XHJcbiAgICBtYXJnaW4tYm90dG9tOiAyMHB4O1xyXG4gIH1cclxuICBcclxuICB0YWJsZSwgdGgsIHRkIHtcclxuICAgIGJvcmRlcjogMnB4IHNvbGlkICNjY2M7XHJcbiAgICB0ZXh0LWFsaWduOiBsZWZ0O1xyXG4gIH1cclxuICBcclxuICB0aCwgdGQge1xyXG4gICAgcGFkZGluZzogMTBweDtcclxuICB9XHJcbiAgXHJcbiAgLmZvcm0tZ3JvdXAge1xyXG4gICAgbWFyZ2luLWJvdHRvbTogMTVweDtcclxuICB9XHJcbiAgXHJcbiAgaW5wdXRbdHlwZT1cImRhdGVcIl0sXHJcbiAgaW5wdXRbdHlwZT1cInRpbWVcIl0sXHJcbiAgc2VsZWN0IHtcclxuICAgIHdpZHRoOiBjYWxjKDEwMCUgLSAyMHB4KTtcclxuICAgIHBhZGRpbmc6IDEwcHg7XHJcbiAgICBmb250LXNpemU6IDE2cHg7XHJcbiAgICBib3JkZXI6IDJweCBzb2xpZCAjY2NjO1xyXG4gICAgYm9yZGVyLXJhZGl1czogNXB4O1xyXG4gIH1cclxuICBcclxuICBidXR0b24ge1xyXG4gICAgcGFkZGluZzogMTBweCAyMHB4O1xyXG4gICAgZm9udC1zaXplOiAxNnB4O1xyXG4gICAgYm9yZGVyOiBub25lO1xyXG4gICAgYmFja2dyb3VuZC1jb2xvcjogIzRjYWY1MDtcclxuICAgIGNvbG9yOiB3aGl0ZTtcclxuICAgIGN1cnNvcjogcG9pbnRlcjtcclxuICAgIGJvcmRlci1yYWRpdXM6IDVweDtcclxuICAgIG1hcmdpbi1yaWdodDogMTBweDsgXHJcbiAgfVxyXG4gIFxyXG4gIGJ1dHRvbjpsYXN0LWNoaWxkIHtcclxuICAgIG1hcmdpbi1yaWdodDogMDsgXHJcbiAgfVxyXG4gIFxyXG4gIGJ1dHRvbjpob3ZlciB7XHJcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjNDVhMDQ5O1xyXG4gIH1cclxuICAiXSwic291cmNlUm9vdCI6IiJ9 */\"]\n  });\n}","map":{"version":3,"names":["i0","ɵɵelementStart","ɵɵtext","ɵɵelementEnd","ɵɵlistener","PatientComponent_tr_17_Template_button_click_10_listener","restoredCtx","ɵɵrestoreView","_r6","appointment_r4","$implicit","ctx_r5","ɵɵnextContext","ɵɵresetView","editAppointment","PatientComponent_tr_17_Template_button_click_12_listener","ctx_r7","cancelAppointment","ɵɵadvance","ɵɵtextInterpolate","ɵɵpipeBind2","date","time","doctorName","ɵɵproperty","doctor_r9","name","PatientComponent_div_18_Template_input_ngModelChange_6_listener","$event","_r11","ctx_r10","editedAppointment","PatientComponent_div_18_Template_input_ngModelChange_9_listener","ctx_r12","PatientComponent_div_18_Template_select_ngModelChange_12_listener","ctx_r13","ɵɵtemplate","PatientComponent_div_18_option_13_Template","PatientComponent_div_18_Template_button_click_14_listener","ctx_r14","saveEditedAppointment","ctx_r1","doctors","doctor_r15","slot_r17","ɵɵtextInterpolate2","PatientComponent_div_26_Template_select_ngModelChange_3_listener","_r19","ctx_r18","newAppointment","slot","PatientComponent_div_26_option_4_Template","ctx_r3","availableSlots","PatientComponent","constructor","doctorService","selectedDoctor","id","appointments","Date","loadDoctors","getDoctors","subscribe","console","log","loadDoctorSlots","getDoctorSlots","toString","slots","appointment","index","indexOf","splice","findIndex","reserveAppointment","push","_","ɵɵdirectiveInject","i1","DoctorService","_2","selectors","decls","vars","consts","template","PatientComponent_Template","rf","ctx","PatientComponent_tr_17_Template","PatientComponent_div_18_Template","PatientComponent_Template_select_ngModelChange_24_listener","PatientComponent_option_25_Template","PatientComponent_div_26_Template","PatientComponent_Template_button_click_27_listener"],"sources":["D:\\Year4\\Tools 3\\clinic-appointment-app\\src\\app\\patient\\patient.component.ts","D:\\Year4\\Tools 3\\clinic-appointment-app\\src\\app\\patient\\patient.component.html"],"sourcesContent":["import { Component } from '@angular/core';\nimport { DoctorService } from '../doctor/doctor.service';\n\ninterface Doctor {\n  id: number;\n  name: string;\n}\n\ninterface Slot {\n  time: string;\n  date:string;\n}\n@Component({\n  selector: 'app-patient',\n  templateUrl: './patient.component.html',\n  styleUrls: ['./patient.component.css']\n})\nexport class PatientComponent {\n  selectedDoctor: Doctor | null = null;\n  doctors: Doctor[] = [\n    { id: 1, name: 'Dr. Smith' },\n    { id: 2, name: 'Dr. Johnson' },\n    { id: 3, name: 'Dr. Davis' },\n  ];\n  appointments: any[] = [\n    { date: new Date('2023-11-15T10:00:00'), time: new Date('2023-11-15T10:00:00'), doctorName: 'Dr. Smith' },\n    { date: new Date('2023-11-16T14:30:00'), time: new Date('2023-11-16T14:30:00'), doctorName: 'Dr. Johnson' }\n  ];\n  newAppointment: { date: string, time: string, slot?: Slot } = { date: '', time: ''};\n  availableSlots: Slot[] = [\n    { date: '2023-11-15', time: '09:00 AM' },\n    { date: '2023-11-15', time: '10:30 AM' },\n    { date: '2023-11-16', time: '01:00 PM' },\n  ];\n  editedAppointment: any | null = null;\n  constructor(private doctorService: DoctorService) {\n    this.loadDoctors();\n  }\n\n  loadDoctors() {\n    this.doctorService.getDoctors().subscribe((doctors: Doctor[]) => {\n    this.doctors = doctors;\n    console.log('Doctors:', this.doctors); // Log the doctors array to the console\n  });\n  }\n\n  loadDoctorSlots() {\n    if (this.selectedDoctor) {\n      this.doctorService.getDoctorSlots(this.selectedDoctor.id.toString()).subscribe((slots: Slot[]) => {\n        this.availableSlots = slots;\n      });\n      \n    }\n  }\n   cancelAppointment(appointment: any) {\n     const index = this.appointments.indexOf(appointment);\n     if (index !== -1) {\n       this.appointments.splice(index, 1);\n     }\n   }\n\n   editAppointment(appointment: any) {\n    // Save the edited appointment for later use\n    this.editedAppointment = { ...appointment };\n  }\n\n  saveEditedAppointment() {\n    if (this.editedAppointment) {\n      // Update the original appointment with the edited values\n      const index = this.appointments.findIndex(appointment => appointment.id === this.editedAppointment.id);\n      if (index !== -1) {\n        this.appointments[index] = { ...this.editedAppointment };\n        this.editedAppointment = null; // Clear the edited appointment\n      }\n    }\n  }\n  reserveAppointment() {\n    console.log('here')\n    if (this.selectedDoctor && this.newAppointment.date && this.newAppointment.time) {\n      const newAppointment: any = {\n        date: this.newAppointment.date,\n        time: this.newAppointment.time,\n        doctorName: this.selectedDoctor.name\n      };\n  \n      this.appointments.push(newAppointment);\n      console.log('New Appointment:', newAppointment); // Log the new appointment to the console\n  \n      // Reset the form fields\n      this.newAppointment = { date: '', time: '' };\n      this.selectedDoctor = null;\n    }\n  }\n}\n","<div class=\"patient-container\">\n  <h2>Hello, Patient</h2>\n\n  <h3>My Appointments</h3>\n  <table>\n    <!-- Table header for patient's appointments -->\n    <thead>\n      <tr>\n        <th>Date</th>\n        <th>Time</th>\n        <th>Doctor's Name</th>\n        <th>Actions</th>\n      </tr>\n    </thead>\n    <!-- Table body for patient's appointments -->\n    <tbody>\n      <tr *ngFor=\"let appointment of appointments\">\n        <td>{{ appointment.date | date:'dd/MM/yy' }}</td>\n        <td>{{ appointment.time | date:'hh:mm a' }}</td>\n        <td>{{ appointment.doctorName }}</td>\n        <td>\n          <button (click)=\"editAppointment(appointment)\">Edit</button>\n          <button (click)=\"cancelAppointment(appointment)\">Cancel</button>\n        </td>\n      </tr>\n    </tbody>\n  </table>\n\n  <!-- Edit Appointment Section -->\n  <div *ngIf=\"editedAppointment\">\n    <h3>Edit Appointment</h3>\n    <form>\n      <label for=\"editedDate\">Date:</label>\n      <input type=\"date\" id=\"editedDate\" [(ngModel)]=\"editedAppointment.date\" name=\"editedDate\" required>\n\n      <label for=\"editedTime\">Time:</label>\n      <input type=\"time\" id=\"editedTime\" [(ngModel)]=\"editedAppointment.time\" name=\"editedTime\" required>\n\n      <label for=\"editedDoctor\">Doctor:</label>\n      <select id=\"editedDoctor\" [(ngModel)]=\"editedAppointment.doctorName\" name=\"editedDoctor\" required>\n        <option *ngFor=\"let doctor of doctors\" [ngValue]=\"doctor.name\">{{ doctor.name }}</option>\n      </select>\n      <button type=\"button\" (click)=\"saveEditedAppointment()\">Save</button>\n    </form>\n  </div>\n\n  <h3>Create New Appointment</h3>\n  <!-- Form for creating a new appointment -->\n  <div class=\"form-group\">\n    <label for=\"doctor\">Select Doctor:</label>\n    <select id=\"doctor\" [(ngModel)]=\"selectedDoctor\" name=\"doctor\" required>\n      <option *ngFor=\"let doctor of doctors\" [ngValue]=\"doctor\">{{ doctor.name }}</option>\n    </select>\n  </div>\n  <div class=\"form-group\" *ngIf=\"selectedDoctor\">\n    <label for=\"slot\">Select Slot:</label>\n    <select id=\"slot\" [(ngModel)]=\"newAppointment.slot\" name=\"slot\" required>\n      <option *ngFor=\"let slot of availableSlots\" [ngValue]=\"slot\">{{ slot.date }} - {{ slot.time }}</option>\n    </select>\n  </div>\n  <button (click)=\"reserveAppointment()\">Reserve</button>\n</div>\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}