{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nexport let DoctorComponent = class DoctorComponent {\n  constructor(messagingService) {\n    this.messagingService = messagingService;\n    this.appointments = [{\n      date: new Date('2023-11-15T10:00:00'),\n      time: new Date('2023-11-15T10:00:00')\n    }, {\n      date: new Date('2023-11-16T14:30:00'),\n      time: new Date('2023-11-16T14:30:00')\n    }];\n    this.showMessagesDropdown = false;\n    this.doctorMessages = ['ReservationCreated', 'ReservationUpdated', 'ReservationCancelled'];\n    this.newAppointment = {\n      date: '',\n      time: ''\n    };\n  }\n  toggleMessagesDropdown() {\n    this.showMessagesDropdown = !this.showMessagesDropdown;\n  }\n  viewMessages() {\n    console.log('View Messages clicked');\n  }\n  editAppointment(appointment) {\n    console.log('Edit appointment:', appointment);\n  }\n  cancelAppointment(appointment) {\n    const index = this.appointments.indexOf(appointment);\n    if (index !== -1) {\n      this.appointments.splice(index, 1);\n    }\n  }\n  addAppointment() {\n    const parsedTime = this.parseTimeString(this.newAppointment.time);\n    if (parsedTime) {\n      this.appointments.push({\n        date: new Date(this.newAppointment.date),\n        time: parsedTime\n      });\n      this.newAppointment = {\n        date: '',\n        time: ''\n      };\n    } else {\n      console.error('Invalid time format');\n      // Handle the error as needed\n    }\n  }\n\n  parseTimeString(timeString) {\n    // Split the time string into hours, minutes, and AM/PM parts\n    const [hoursStr, minutesStr] = timeString.split(':');\n    const hours = parseInt(hoursStr, 10);\n    const minutes = parseInt(minutesStr, 10);\n    // Check if the provided time is valid\n    if (isNaN(hours) || isNaN(minutes)) {\n      console.error('Invalid time format. Please enter a valid time.');\n      return null;\n    }\n    // Create a new Date object and set the hours and minutes\n    const date = new Date();\n    date.setHours(hours, minutes, 0, 0);\n    return date;\n  }\n};\nDoctorComponent = __decorate([Component({\n  selector: 'app-doctor',\n  templateUrl: './doctor.component.html',\n  styleUrls: ['./doctor.component.css']\n})], DoctorComponent);","map":{"version":3,"names":["Component","DoctorComponent","constructor","messagingService","appointments","date","Date","time","showMessagesDropdown","doctorMessages","newAppointment","toggleMessagesDropdown","viewMessages","console","log","editAppointment","appointment","cancelAppointment","index","indexOf","splice","addAppointment","parsedTime","parseTimeString","push","error","timeString","hoursStr","minutesStr","split","hours","parseInt","minutes","isNaN","setHours","__decorate","selector","templateUrl","styleUrls"],"sources":["D:\\Year4\\Tools 3\\clinic-appointment-app\\src\\app\\doctor\\doctor.component.ts"],"sourcesContent":["import { Component } from '@angular/core';\nimport { MessagingService } from '../messages/messages.service';\n@Component({\n  selector: 'app-doctor',\n  templateUrl: './doctor.component.html',\n  styleUrls: ['./doctor.component.css']\n})\nexport class DoctorComponent {\n appointments: any[] = [\n    { date: new Date('2023-11-15T10:00:00'), time: new Date('2023-11-15T10:00:00') },\n    { date: new Date('2023-11-16T14:30:00'), time: new Date('2023-11-16T14:30:00') }\n  ];\n  showMessagesDropdown: boolean = false;\n  doctorMessages: string[] = [\n  'ReservationCreated',\n  'ReservationUpdated',\n  'ReservationCancelled'\n]; \n  newAppointment: { date: string, time: string } = { date: '', time: '' };\n\n  constructor(private messagingService: MessagingService) {}\n  \n  toggleMessagesDropdown() {\n    this.showMessagesDropdown = !this.showMessagesDropdown;\n}\n\n  viewMessages() {\n    console.log('View Messages clicked');\n}\n  editAppointment(appointment: any) {\n    console.log('Edit appointment:', appointment);\n  }\n\n  cancelAppointment(appointment: any) {\n    const index = this.appointments.indexOf(appointment);\n    if (index !== -1) {\n      this.appointments.splice(index, 1);\n    }\n  }\n\n  addAppointment() {\n    const parsedTime = this.parseTimeString(this.newAppointment.time);\n\n    if (parsedTime) {\n      this.appointments.push({\n        date: new Date(this.newAppointment.date),\n        time: parsedTime\n      });\n      this.newAppointment = { date: '', time: '' };\n    } else {\n      console.error('Invalid time format');\n      // Handle the error as needed\n    }\n  }\n\n  private parseTimeString(timeString: string): Date | null {\n    // Split the time string into hours, minutes, and AM/PM parts\n    const [hoursStr, minutesStr] = timeString.split(':');\n    const hours = parseInt(hoursStr, 10);\n    const minutes = parseInt(minutesStr, 10);\n  \n    // Check if the provided time is valid\n    if (isNaN(hours) || isNaN(minutes)) {\n      console.error('Invalid time format. Please enter a valid time.');\n      return null;\n    }\n  \n    // Create a new Date object and set the hours and minutes\n    const date = new Date();\n    date.setHours(hours, minutes, 0, 0);\n  \n    return date;\n  }\n  \n}\n"],"mappings":";AAAA,SAASA,SAAS,QAAQ,eAAe;AAOlC,WAAMC,eAAe,GAArB,MAAMA,eAAe;EAa1BC,YAAoBC,gBAAkC;IAAlC,KAAAA,gBAAgB,GAAhBA,gBAAgB;IAZrC,KAAAC,YAAY,GAAU,CACnB;MAAEC,IAAI,EAAE,IAAIC,IAAI,CAAC,qBAAqB,CAAC;MAAEC,IAAI,EAAE,IAAID,IAAI,CAAC,qBAAqB;IAAC,CAAE,EAChF;MAAED,IAAI,EAAE,IAAIC,IAAI,CAAC,qBAAqB,CAAC;MAAEC,IAAI,EAAE,IAAID,IAAI,CAAC,qBAAqB;IAAC,CAAE,CACjF;IACD,KAAAE,oBAAoB,GAAY,KAAK;IACrC,KAAAC,cAAc,GAAa,CAC3B,oBAAoB,EACpB,oBAAoB,EACpB,sBAAsB,CACvB;IACC,KAAAC,cAAc,GAAmC;MAAEL,IAAI,EAAE,EAAE;MAAEE,IAAI,EAAE;IAAE,CAAE;EAEd;EAEzDI,sBAAsBA,CAAA;IACpB,IAAI,CAACH,oBAAoB,GAAG,CAAC,IAAI,CAACA,oBAAoB;EAC1D;EAEEI,YAAYA,CAAA;IACVC,OAAO,CAACC,GAAG,CAAC,uBAAuB,CAAC;EACxC;EACEC,eAAeA,CAACC,WAAgB;IAC9BH,OAAO,CAACC,GAAG,CAAC,mBAAmB,EAAEE,WAAW,CAAC;EAC/C;EAEAC,iBAAiBA,CAACD,WAAgB;IAChC,MAAME,KAAK,GAAG,IAAI,CAACd,YAAY,CAACe,OAAO,CAACH,WAAW,CAAC;IACpD,IAAIE,KAAK,KAAK,CAAC,CAAC,EAAE;MAChB,IAAI,CAACd,YAAY,CAACgB,MAAM,CAACF,KAAK,EAAE,CAAC,CAAC;;EAEtC;EAEAG,cAAcA,CAAA;IACZ,MAAMC,UAAU,GAAG,IAAI,CAACC,eAAe,CAAC,IAAI,CAACb,cAAc,CAACH,IAAI,CAAC;IAEjE,IAAIe,UAAU,EAAE;MACd,IAAI,CAAClB,YAAY,CAACoB,IAAI,CAAC;QACrBnB,IAAI,EAAE,IAAIC,IAAI,CAAC,IAAI,CAACI,cAAc,CAACL,IAAI,CAAC;QACxCE,IAAI,EAAEe;OACP,CAAC;MACF,IAAI,CAACZ,cAAc,GAAG;QAAEL,IAAI,EAAE,EAAE;QAAEE,IAAI,EAAE;MAAE,CAAE;KAC7C,MAAM;MACLM,OAAO,CAACY,KAAK,CAAC,qBAAqB,CAAC;MACpC;;EAEJ;;EAEQF,eAAeA,CAACG,UAAkB;IACxC;IACA,MAAM,CAACC,QAAQ,EAAEC,UAAU,CAAC,GAAGF,UAAU,CAACG,KAAK,CAAC,GAAG,CAAC;IACpD,MAAMC,KAAK,GAAGC,QAAQ,CAACJ,QAAQ,EAAE,EAAE,CAAC;IACpC,MAAMK,OAAO,GAAGD,QAAQ,CAACH,UAAU,EAAE,EAAE,CAAC;IAExC;IACA,IAAIK,KAAK,CAACH,KAAK,CAAC,IAAIG,KAAK,CAACD,OAAO,CAAC,EAAE;MAClCnB,OAAO,CAACY,KAAK,CAAC,iDAAiD,CAAC;MAChE,OAAO,IAAI;;IAGb;IACA,MAAMpB,IAAI,GAAG,IAAIC,IAAI,EAAE;IACvBD,IAAI,CAAC6B,QAAQ,CAACJ,KAAK,EAAEE,OAAO,EAAE,CAAC,EAAE,CAAC,CAAC;IAEnC,OAAO3B,IAAI;EACb;CAED;AAnEYJ,eAAe,GAAAkC,UAAA,EAL3BnC,SAAS,CAAC;EACToC,QAAQ,EAAE,YAAY;EACtBC,WAAW,EAAE,yBAAyB;EACtCC,SAAS,EAAE,CAAC,wBAAwB;CACrC,CAAC,C,EACWrC,eAAe,CAmE3B"},"metadata":{},"sourceType":"module","externalDependencies":[]}