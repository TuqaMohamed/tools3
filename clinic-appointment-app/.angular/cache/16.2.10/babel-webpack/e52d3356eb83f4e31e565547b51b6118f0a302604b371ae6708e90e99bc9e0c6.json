{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nexport let PatientComponent = class PatientComponent {\n  constructor(doctorService) {\n    this.doctorService = doctorService;\n    this.selectedDoctor = null;\n    this.doctors = [];\n    this.appointments = [];\n    this.newAppointment = {\n      date: '',\n      time: ''\n    };\n    this.availableSlots = [];\n    this.editedAppointment = null;\n    this.loadDoctors();\n  }\n  loadDoctors() {\n    this.doctorService.getDoctors().subscribe(doctors => {\n      this.doctors = doctors;\n      console.log('Doctors:', this.doctors);\n    });\n  }\n  loadDoctorSlots() {\n    if (this.selectedDoctor) {\n      this.doctorService.getDoctorSlots(this.selectedDoctor.id.toString()).subscribe(slots => {\n        this.availableSlots = slots;\n      });\n    }\n  }\n  cancelAppointment(appointment) {\n    const index = this.appointments.indexOf(appointment);\n    if (index !== -1) {\n      this.appointments.splice(index, 1);\n    }\n  }\n  editAppointment(appointment) {\n    this.editedAppointment = {\n      ...appointment\n    };\n    this.editedAppointment.time = this.formatTime(this.editedAppointment.time);\n  }\n  saveEditedAppointment() {\n    if (this.editedAppointment) {\n      this.editedAppointment.time = this.parseTimeString(this.editedAppointment.time);\n      const index = this.appointments.findIndex(appointment => appointment.id === this.editedAppointment.id);\n      if (index !== -1) {\n        this.appointments[index] = {\n          ...this.editedAppointment\n        };\n        this.editedAppointment = null;\n      }\n    }\n  }\n  formatTime(time) {\n    const options = {\n      hour: 'numeric',\n      minute: 'numeric',\n      hour12: true\n    };\n    return new Intl.DateTimeFormat('en-US', options).format(time);\n  }\n  parseTimeString(timeString) {\n    const [hoursStr, minutesStr] = timeString.split(':');\n    const hours = parseInt(hoursStr, 10);\n    const minutes = parseInt(minutesStr, 10);\n    if (isNaN(hours) || isNaN(minutes)) {\n      console.error('Invalid time format. Please enter a valid time.');\n      return null;\n    }\n    const date = new Date();\n    date.setHours(hours, minutes, 0, 0);\n    return date;\n  }\n  reserveAppointment() {\n    if (this.selectedDoctor && this.newAppointment.date && this.newAppointment.time) {\n      const parsedTime = this.parseTimeString(this.newAppointment.time);\n      console.log('Parsed Time:', parsedTime);\n      if (parsedTime) {\n        const newAppointment = {\n          date: new Date(this.newAppointment.date),\n          time: parsedTime,\n          doctorName: this.selectedDoctor.name\n        };\n        console.log('Adding New Appointment:', newAppointment);\n        this.appointments.push(newAppointment);\n        console.log('Updated Appointments:', this.appointments);\n        this.newAppointment = {\n          date: '',\n          time: ''\n        };\n        this.selectedDoctor = null;\n      } else {\n        console.error('Invalid time format');\n      }\n    }\n  }\n};\nPatientComponent = __decorate([Component({\n  selector: 'app-patient',\n  templateUrl: './patient.component.html',\n  styleUrls: ['./patient.component.css']\n})], PatientComponent);","map":{"version":3,"names":["Component","PatientComponent","constructor","doctorService","selectedDoctor","doctors","appointments","newAppointment","date","time","availableSlots","editedAppointment","loadDoctors","getDoctors","subscribe","console","log","loadDoctorSlots","getDoctorSlots","id","toString","slots","cancelAppointment","appointment","index","indexOf","splice","editAppointment","formatTime","saveEditedAppointment","parseTimeString","findIndex","options","hour","minute","hour12","Intl","DateTimeFormat","format","timeString","hoursStr","minutesStr","split","hours","parseInt","minutes","isNaN","error","Date","setHours","reserveAppointment","parsedTime","doctorName","name","push","__decorate","selector","templateUrl","styleUrls"],"sources":["D:\\Year4\\Tools 3\\clinic-appointment-app\\src\\app\\patient\\patient.component.ts"],"sourcesContent":["import { Component } from '@angular/core';\nimport { DoctorService } from '../doctor/doctor.service';\nimport { PatientService } from './patient.service';\nimport { ActivatedRoute } from '@angular/router';\n\ninterface Doctor {\n  id: number;\n  name: string;\n}\n\ninterface Slot {\n  time: string;\n  date:string;\n}\n@Component({\n  selector: 'app-patient',\n  templateUrl: './patient.component.html',\n  styleUrls: ['./patient.component.css']\n})\nexport class PatientComponent {\n  selectedDoctor: Doctor | null = null;\n  doctors: Doctor[] = [];\n  appointments: any[] = [];\n  newAppointment: { date: string, time: string, slot?: Slot } = { date: '', time: ''};\n  availableSlots: Slot[] = [];\n  editedAppointment: any | null = null;\n  constructor(private doctorService: DoctorService) {\n    this.loadDoctors();\n  }\n\nloadDoctors() {\n    this.doctorService.getDoctors().subscribe((doctors: Doctor[]) => {\n    this.doctors = doctors;\n    console.log('Doctors:', this.doctors); \n  });\n  }\n\nloadDoctorSlots() {\n    if (this.selectedDoctor) {\n      this.doctorService.getDoctorSlots(this.selectedDoctor.id.toString()).subscribe((slots: Slot[]) => {\n        this.availableSlots = slots;\n      });\n    }\n  }\ncancelAppointment(appointment: any) {\n    const index = this.appointments.indexOf(appointment);\n    if (index !== -1) {\n      this.appointments.splice(index, 1);\n    }\n  }\n\neditAppointment(appointment: any) {\n  this.editedAppointment = { ...appointment };\n  this.editedAppointment.time = this.formatTime(this.editedAppointment.time);\n}\n\nsaveEditedAppointment() {\n  if (this.editedAppointment) {\n    this.editedAppointment.time = this.parseTimeString(this.editedAppointment.time);\n    const index = this.appointments.findIndex(appointment => appointment.id === this.editedAppointment.id);\n    if (index !== -1) {\n      this.appointments[index] = { ...this.editedAppointment };\n      this.editedAppointment = null; \n    }\n  }\n}\n\nformatTime(time: Date): string {\n  const options: Intl.DateTimeFormatOptions = { hour: 'numeric', minute: 'numeric', hour12: true };\n  return new Intl.DateTimeFormat('en-US', options).format(time);\n}\n\nprivate parseTimeString(timeString: string): Date | null {\n  const [hoursStr, minutesStr] = timeString.split(':');\n  const hours = parseInt(hoursStr, 10);\n  const minutes = parseInt(minutesStr, 10);\n\n  if (isNaN(hours) || isNaN(minutes)) {\n    console.error('Invalid time format. Please enter a valid time.');\n    return null;\n  }\n\n  const date = new Date();\n  date.setHours(hours, minutes, 0, 0);\n\n  return date;\n}\n\nreserveAppointment() {\n  if (this.selectedDoctor && this.newAppointment.date && this.newAppointment.time) {\n    const parsedTime = this.parseTimeString(this.newAppointment.time);\n\n    console.log('Parsed Time:', parsedTime);\n\n    if (parsedTime) {\n      const newAppointment: any = {\n        date: new Date(this.newAppointment.date),\n        time: parsedTime,\n        doctorName: this.selectedDoctor.name\n      };\n\n      console.log('Adding New Appointment:', newAppointment);\n\n      this.appointments.push(newAppointment);\n      console.log('Updated Appointments:', this.appointments);\n\n      this.newAppointment = { date: '', time: '' };\n      this.selectedDoctor = null;\n    } else {\n      console.error('Invalid time format');\n      \n    }\n  }\n}  \n}\n"],"mappings":";AAAA,SAASA,SAAS,QAAQ,eAAe;AAmBlC,WAAMC,gBAAgB,GAAtB,MAAMA,gBAAgB;EAO3BC,YAAoBC,aAA4B;IAA5B,KAAAA,aAAa,GAAbA,aAAa;IANjC,KAAAC,cAAc,GAAkB,IAAI;IACpC,KAAAC,OAAO,GAAa,EAAE;IACtB,KAAAC,YAAY,GAAU,EAAE;IACxB,KAAAC,cAAc,GAAgD;MAAEC,IAAI,EAAE,EAAE;MAAEC,IAAI,EAAE;IAAE,CAAC;IACnF,KAAAC,cAAc,GAAW,EAAE;IAC3B,KAAAC,iBAAiB,GAAe,IAAI;IAElC,IAAI,CAACC,WAAW,EAAE;EACpB;EAEFA,WAAWA,CAAA;IACP,IAAI,CAACT,aAAa,CAACU,UAAU,EAAE,CAACC,SAAS,CAAET,OAAiB,IAAI;MAChE,IAAI,CAACA,OAAO,GAAGA,OAAO;MACtBU,OAAO,CAACC,GAAG,CAAC,UAAU,EAAE,IAAI,CAACX,OAAO,CAAC;IACvC,CAAC,CAAC;EACF;EAEFY,eAAeA,CAAA;IACX,IAAI,IAAI,CAACb,cAAc,EAAE;MACvB,IAAI,CAACD,aAAa,CAACe,cAAc,CAAC,IAAI,CAACd,cAAc,CAACe,EAAE,CAACC,QAAQ,EAAE,CAAC,CAACN,SAAS,CAAEO,KAAa,IAAI;QAC/F,IAAI,CAACX,cAAc,GAAGW,KAAK;MAC7B,CAAC,CAAC;;EAEN;EACFC,iBAAiBA,CAACC,WAAgB;IAC9B,MAAMC,KAAK,GAAG,IAAI,CAAClB,YAAY,CAACmB,OAAO,CAACF,WAAW,CAAC;IACpD,IAAIC,KAAK,KAAK,CAAC,CAAC,EAAE;MAChB,IAAI,CAAClB,YAAY,CAACoB,MAAM,CAACF,KAAK,EAAE,CAAC,CAAC;;EAEtC;EAEFG,eAAeA,CAACJ,WAAgB;IAC9B,IAAI,CAACZ,iBAAiB,GAAG;MAAE,GAAGY;IAAW,CAAE;IAC3C,IAAI,CAACZ,iBAAiB,CAACF,IAAI,GAAG,IAAI,CAACmB,UAAU,CAAC,IAAI,CAACjB,iBAAiB,CAACF,IAAI,CAAC;EAC5E;EAEAoB,qBAAqBA,CAAA;IACnB,IAAI,IAAI,CAAClB,iBAAiB,EAAE;MAC1B,IAAI,CAACA,iBAAiB,CAACF,IAAI,GAAG,IAAI,CAACqB,eAAe,CAAC,IAAI,CAACnB,iBAAiB,CAACF,IAAI,CAAC;MAC/E,MAAMe,KAAK,GAAG,IAAI,CAAClB,YAAY,CAACyB,SAAS,CAACR,WAAW,IAAIA,WAAW,CAACJ,EAAE,KAAK,IAAI,CAACR,iBAAiB,CAACQ,EAAE,CAAC;MACtG,IAAIK,KAAK,KAAK,CAAC,CAAC,EAAE;QAChB,IAAI,CAAClB,YAAY,CAACkB,KAAK,CAAC,GAAG;UAAE,GAAG,IAAI,CAACb;QAAiB,CAAE;QACxD,IAAI,CAACA,iBAAiB,GAAG,IAAI;;;EAGnC;EAEAiB,UAAUA,CAACnB,IAAU;IACnB,MAAMuB,OAAO,GAA+B;MAAEC,IAAI,EAAE,SAAS;MAAEC,MAAM,EAAE,SAAS;MAAEC,MAAM,EAAE;IAAI,CAAE;IAChG,OAAO,IAAIC,IAAI,CAACC,cAAc,CAAC,OAAO,EAAEL,OAAO,CAAC,CAACM,MAAM,CAAC7B,IAAI,CAAC;EAC/D;EAEQqB,eAAeA,CAACS,UAAkB;IACxC,MAAM,CAACC,QAAQ,EAAEC,UAAU,CAAC,GAAGF,UAAU,CAACG,KAAK,CAAC,GAAG,CAAC;IACpD,MAAMC,KAAK,GAAGC,QAAQ,CAACJ,QAAQ,EAAE,EAAE,CAAC;IACpC,MAAMK,OAAO,GAAGD,QAAQ,CAACH,UAAU,EAAE,EAAE,CAAC;IAExC,IAAIK,KAAK,CAACH,KAAK,CAAC,IAAIG,KAAK,CAACD,OAAO,CAAC,EAAE;MAClC9B,OAAO,CAACgC,KAAK,CAAC,iDAAiD,CAAC;MAChE,OAAO,IAAI;;IAGb,MAAMvC,IAAI,GAAG,IAAIwC,IAAI,EAAE;IACvBxC,IAAI,CAACyC,QAAQ,CAACN,KAAK,EAAEE,OAAO,EAAE,CAAC,EAAE,CAAC,CAAC;IAEnC,OAAOrC,IAAI;EACb;EAEA0C,kBAAkBA,CAAA;IAChB,IAAI,IAAI,CAAC9C,cAAc,IAAI,IAAI,CAACG,cAAc,CAACC,IAAI,IAAI,IAAI,CAACD,cAAc,CAACE,IAAI,EAAE;MAC/E,MAAM0C,UAAU,GAAG,IAAI,CAACrB,eAAe,CAAC,IAAI,CAACvB,cAAc,CAACE,IAAI,CAAC;MAEjEM,OAAO,CAACC,GAAG,CAAC,cAAc,EAAEmC,UAAU,CAAC;MAEvC,IAAIA,UAAU,EAAE;QACd,MAAM5C,cAAc,GAAQ;UAC1BC,IAAI,EAAE,IAAIwC,IAAI,CAAC,IAAI,CAACzC,cAAc,CAACC,IAAI,CAAC;UACxCC,IAAI,EAAE0C,UAAU;UAChBC,UAAU,EAAE,IAAI,CAAChD,cAAc,CAACiD;SACjC;QAEDtC,OAAO,CAACC,GAAG,CAAC,yBAAyB,EAAET,cAAc,CAAC;QAEtD,IAAI,CAACD,YAAY,CAACgD,IAAI,CAAC/C,cAAc,CAAC;QACtCQ,OAAO,CAACC,GAAG,CAAC,uBAAuB,EAAE,IAAI,CAACV,YAAY,CAAC;QAEvD,IAAI,CAACC,cAAc,GAAG;UAAEC,IAAI,EAAE,EAAE;UAAEC,IAAI,EAAE;QAAE,CAAE;QAC5C,IAAI,CAACL,cAAc,GAAG,IAAI;OAC3B,MAAM;QACLW,OAAO,CAACgC,KAAK,CAAC,qBAAqB,CAAC;;;EAI1C;CACC;AA/FY9C,gBAAgB,GAAAsD,UAAA,EAL5BvD,SAAS,CAAC;EACTwD,QAAQ,EAAE,aAAa;EACvBC,WAAW,EAAE,0BAA0B;EACvCC,SAAS,EAAE,CAAC,yBAAyB;CACtC,CAAC,C,EACWzD,gBAAgB,CA+F5B"},"metadata":{},"sourceType":"module","externalDependencies":[]}