{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nexport let DoctorComponent = class DoctorComponent {\n  constructor(doctorService, route) {\n    this.doctorService = doctorService;\n    this.route = route;\n    this.appointments = [];\n    this.showMessagesDropdown = false;\n    this.doctorMessages = ['ReservationCreated', 'ReservationUpdated', 'ReservationCancelled'];\n    this.newAppointment = {\n      date: '',\n      time: ''\n    };\n  }\n  ngOnInit() {\n    this.router.params.subscribe(params => {\n      this.id = params['id'];\n    });\n    this.loadDoctorSlots();\n  }\n  toggleMessagesDropdown() {\n    this.showMessagesDropdown = !this.showMessagesDropdown;\n  }\n  fetchDoctorMessages() {\n    this.doctorMessages = ['Message 1', 'Message 2', 'Message 3'];\n  }\n  editAppointment(appointment) {\n    console.log('Edit appointment:', appointment);\n  }\n  cancelAppointment(appointment) {\n    const index = this.appointments.indexOf(appointment);\n    if (index !== -1) {\n      this.appointments.splice(index, 1);\n    }\n  }\n  addAppointmentAndSetSchedule() {\n    const parsedTime = this.parseTimeString(this.newAppointment.time);\n    if (parsedTime) {\n      const newAppointment = {\n        date: new Date(this.newAppointment.date),\n        time: parsedTime\n      };\n      this.appointments.push(newAppointment);\n      this.doctorService.setDoctorSchedule(newAppointment).subscribe(response => {\n        console.log('Appointment added and schedule set successfully', response);\n      }, error => {\n        console.error('Error adding appointment and setting schedule:', error);\n      });\n      this.newAppointment = {\n        date: '',\n        time: ''\n      };\n    } else {\n      console.error('Invalid time format');\n    }\n  }\n  parseTimeString(timeString) {\n    const [hoursStr, minutesStr] = timeString.split(':');\n    const hours = parseInt(hoursStr, 10);\n    const minutes = parseInt(minutesStr, 10);\n    if (isNaN(hours) || isNaN(minutes)) {\n      console.error('Invalid time format. Please enter a valid time.');\n      return null;\n    }\n    const date = new Date();\n    date.setHours(hours, minutes, 0, 0);\n    return date;\n  }\n};\nDoctorComponent = __decorate([Component({\n  selector: 'app-doctor',\n  templateUrl: './doctor.component.html',\n  styleUrls: ['./doctor.component.css']\n})], DoctorComponent);","map":{"version":3,"names":["Component","DoctorComponent","constructor","doctorService","route","appointments","showMessagesDropdown","doctorMessages","newAppointment","date","time","ngOnInit","router","params","subscribe","id","loadDoctorSlots","toggleMessagesDropdown","fetchDoctorMessages","editAppointment","appointment","console","log","cancelAppointment","index","indexOf","splice","addAppointmentAndSetSchedule","parsedTime","parseTimeString","Date","push","setDoctorSchedule","response","error","timeString","hoursStr","minutesStr","split","hours","parseInt","minutes","isNaN","setHours","__decorate","selector","templateUrl","styleUrls"],"sources":["D:\\Year4\\Tools 3\\clinic-appointment-app\\src\\app\\doctor\\doctor.component.ts"],"sourcesContent":["import { Component } from '@angular/core';\nimport { DoctorService } from './doctor.service';\n@Component({\n  selector: 'app-doctor',\n  templateUrl: './doctor.component.html',\n  styleUrls: ['./doctor.component.css']\n})\nexport class DoctorComponent {\n  appointments: any[] = [];\n  showMessagesDropdown: boolean = false;\n  doctorMessages: string[] = [\n  'ReservationCreated',\n  'ReservationUpdated',\n  'ReservationCancelled'\n]; \n  \n  newAppointment: { date: string, time: string } = { date: '', time: '' };\n  constructor(private doctorService: DoctorService,private route: ActivatedRoute) { }\n  ngOnInit() {\n    this.router.params.subscribe(params=>\n      {this.id= params['id'];}\n      );\n      this.loadDoctorSlots();\n\n  }\n  toggleMessagesDropdown() \n  {\n    this.showMessagesDropdown = !this.showMessagesDropdown;\n  }\n  \n  fetchDoctorMessages() \n  {\n    this.doctorMessages = ['Message 1', 'Message 2', 'Message 3'];\n  }\n\n  editAppointment(appointment: any) \n  {\n    console.log('Edit appointment:', appointment);\n  }\n\n  cancelAppointment(appointment: any) \n  {\n    const index = this.appointments.indexOf(appointment);\n    if (index !== -1) {\n      this.appointments.splice(index, 1);\n    }\n  }\n  addAppointmentAndSetSchedule() {\n    const parsedTime = this.parseTimeString(this.newAppointment.time);\n    if (parsedTime) {\n      const newAppointment = {\n        date: new Date(this.newAppointment.date),\n        time: parsedTime\n      };\n\n      this.appointments.push(newAppointment);\n\n      this.doctorService.setDoctorSchedule(newAppointment).subscribe(\n        (response) => {\n          console.log('Appointment added and schedule set successfully', response);\n        },\n        (error) => {\n          console.error('Error adding appointment and setting schedule:', error);\n        }\n      );\n\n      this.newAppointment = { date: '', time: '' };\n    } else {\n      console.error('Invalid time format');\n    }\n  }\n    private parseTimeString(timeString: string): Date | null \n  {\n    const [hoursStr, minutesStr] = timeString.split(':');\n    const hours = parseInt(hoursStr, 10);\n    const minutes = parseInt(minutesStr, 10);\n  \n    if (isNaN(hours) || isNaN(minutes)) {\n      console.error('Invalid time format. Please enter a valid time.');\n      return null;\n    }\n    const date = new Date();\n    date.setHours(hours, minutes, 0, 0);\n    return date;\n  }\n  \n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}