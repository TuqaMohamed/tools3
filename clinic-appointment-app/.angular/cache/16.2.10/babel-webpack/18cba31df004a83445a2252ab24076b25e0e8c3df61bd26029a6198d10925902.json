{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nexport let PatientComponent = class PatientComponent {\n  constructor(doctorService) {\n    this.doctorService = doctorService;\n    this.selectedDoctor = null;\n    this.doctors = [];\n    this.appointments = [{\n      date: new Date('2023-11-15T10:00:00'),\n      time: new Date('2023-11-15T10:00:00'),\n      doctorName: 'Dr. Smith'\n    }, {\n      date: new Date('2023-11-16T14:30:00'),\n      time: new Date('2023-11-16T14:30:00'),\n      doctorName: 'Dr. Johnson'\n    }];\n    this.newAppointment = {\n      date: '',\n      time: ''\n    };\n    this.availableSlots = [];\n    this.loadDoctors();\n  }\n  loadDoctors() {\n    this.doctorService.getDoctors().subscribe(doctors => {\n      this.doctors = doctors;\n      console.log('Doctors:', this.doctors); // Log the doctors array to the console\n    });\n  }\n\n  loadDoctorSlots() {\n    if (this.selectedDoctor) {\n      this.doctorService.getDoctorSlots(this.selectedDoctor.id.toString()).subscribe(slots => {\n        this.availableSlots = slots;\n      });\n    }\n  }\n  cancelAppointment(appointment) {\n    const index = this.appointments.indexOf(appointment);\n    if (index !== -1) {\n      this.appointments.splice(index, 1);\n    }\n  }\n  editAppointment(appointment) {\n    // Logic to edit the appointment\n    console.log('Edit appointment:', appointment);\n  }\n  reserveAppointment() {\n    if (this.selectedDoctor && this.newAppointment.date && this.newAppointment.time) {\n      const newAppointment = {\n        date: this.newAppointment.date,\n        time: this.newAppointment.time,\n        doctorName: this.selectedDoctor.name\n      };\n      this.appointments.push(newAppointment);\n      console.log('New Appointment:', newAppointment); // Log the new appointment to the console\n      // Reset the form fields\n      this.newAppointment = {\n        date: '',\n        time: ''\n      };\n      this.selectedDoctor = null;\n    }\n  }\n};\nPatientComponent = __decorate([Component({\n  selector: 'app-patient',\n  templateUrl: './patient.component.html',\n  styleUrls: ['./patient.component.css']\n})], PatientComponent);","map":{"version":3,"names":["Component","PatientComponent","constructor","doctorService","selectedDoctor","doctors","appointments","date","Date","time","doctorName","newAppointment","availableSlots","loadDoctors","getDoctors","subscribe","console","log","loadDoctorSlots","getDoctorSlots","id","toString","slots","cancelAppointment","appointment","index","indexOf","splice","editAppointment","reserveAppointment","name","push","__decorate","selector","templateUrl","styleUrls"],"sources":["D:\\Year4\\Tools 3\\clinic-appointment-app\\src\\app\\patient\\patient.component.ts"],"sourcesContent":["import { Component } from '@angular/core';\nimport { DoctorService } from '../doctor/doctor.service';\n\ninterface Doctor {\n  id: number;\n  name: string;\n}\n\ninterface Slot {\n  time: string;\n}\n@Component({\n  selector: 'app-patient',\n  templateUrl: './patient.component.html',\n  styleUrls: ['./patient.component.css']\n})\nexport class PatientComponent {\n  selectedDoctor: Doctor | null = null;\n  doctors: Doctor[] = [];\n  appointments: any[] = [\n    { date: new Date('2023-11-15T10:00:00'), time: new Date('2023-11-15T10:00:00'), doctorName: 'Dr. Smith' },\n    { date: new Date('2023-11-16T14:30:00'), time: new Date('2023-11-16T14:30:00'), doctorName: 'Dr. Johnson' }\n  ];\n  newAppointment: { date: string, time: string, slot?: Slot } = { date: '', time: ''};\n  availableSlots: Slot[] = [];\n\n  constructor(private doctorService: DoctorService) {\n    this.loadDoctors();\n  }\n\n  loadDoctors() {\n    this.doctorService.getDoctors().subscribe((doctors: Doctor[]) => {\n      this.doctors = doctors;\n      console.log('Doctors:', this.doctors); // Log the doctors array to the console\n    });\n  }\n\n  loadDoctorSlots() {\n    if (this.selectedDoctor) {\n      this.doctorService.getDoctorSlots(this.selectedDoctor.id.toString()).subscribe((slots: Slot[]) => {\n        this.availableSlots = slots;\n      });\n      \n    }\n  }\n\n   cancelAppointment(appointment: any) {\n     const index = this.appointments.indexOf(appointment);\n     if (index !== -1) {\n       this.appointments.splice(index, 1);\n     }\n   }\n\n  editAppointment(appointment: any) {\n    // Logic to edit the appointment\n    console.log('Edit appointment:', appointment);\n  }\n\n  reserveAppointment() {\n    if (this.selectedDoctor && this.newAppointment.date && this.newAppointment.time) {\n      const newAppointment: any = {\n        date: this.newAppointment.date,\n        time: this.newAppointment.time,\n        doctorName: this.selectedDoctor.name\n      };\n  \n      this.appointments.push(newAppointment);\n      console.log('New Appointment:', newAppointment); // Log the new appointment to the console\n  \n      // Reset the form fields\n      this.newAppointment = { date: '', time: '' };\n      this.selectedDoctor = null;\n    }\n  }\n}\n"],"mappings":";AAAA,SAASA,SAAS,QAAQ,eAAe;AAgBlC,WAAMC,gBAAgB,GAAtB,MAAMA,gBAAgB;EAU3BC,YAAoBC,aAA4B;IAA5B,KAAAA,aAAa,GAAbA,aAAa;IATjC,KAAAC,cAAc,GAAkB,IAAI;IACpC,KAAAC,OAAO,GAAa,EAAE;IACtB,KAAAC,YAAY,GAAU,CACpB;MAAEC,IAAI,EAAE,IAAIC,IAAI,CAAC,qBAAqB,CAAC;MAAEC,IAAI,EAAE,IAAID,IAAI,CAAC,qBAAqB,CAAC;MAAEE,UAAU,EAAE;IAAW,CAAE,EACzG;MAAEH,IAAI,EAAE,IAAIC,IAAI,CAAC,qBAAqB,CAAC;MAAEC,IAAI,EAAE,IAAID,IAAI,CAAC,qBAAqB,CAAC;MAAEE,UAAU,EAAE;IAAa,CAAE,CAC5G;IACD,KAAAC,cAAc,GAAgD;MAAEJ,IAAI,EAAE,EAAE;MAAEE,IAAI,EAAE;IAAE,CAAC;IACnF,KAAAG,cAAc,GAAW,EAAE;IAGzB,IAAI,CAACC,WAAW,EAAE;EACpB;EAEAA,WAAWA,CAAA;IACT,IAAI,CAACV,aAAa,CAACW,UAAU,EAAE,CAACC,SAAS,CAAEV,OAAiB,IAAI;MAC9D,IAAI,CAACA,OAAO,GAAGA,OAAO;MACtBW,OAAO,CAACC,GAAG,CAAC,UAAU,EAAE,IAAI,CAACZ,OAAO,CAAC,CAAC,CAAC;IACzC,CAAC,CAAC;EACJ;;EAEAa,eAAeA,CAAA;IACb,IAAI,IAAI,CAACd,cAAc,EAAE;MACvB,IAAI,CAACD,aAAa,CAACgB,cAAc,CAAC,IAAI,CAACf,cAAc,CAACgB,EAAE,CAACC,QAAQ,EAAE,CAAC,CAACN,SAAS,CAAEO,KAAa,IAAI;QAC/F,IAAI,CAACV,cAAc,GAAGU,KAAK;MAC7B,CAAC,CAAC;;EAGN;EAECC,iBAAiBA,CAACC,WAAgB;IAChC,MAAMC,KAAK,GAAG,IAAI,CAACnB,YAAY,CAACoB,OAAO,CAACF,WAAW,CAAC;IACpD,IAAIC,KAAK,KAAK,CAAC,CAAC,EAAE;MAChB,IAAI,CAACnB,YAAY,CAACqB,MAAM,CAACF,KAAK,EAAE,CAAC,CAAC;;EAEtC;EAEDG,eAAeA,CAACJ,WAAgB;IAC9B;IACAR,OAAO,CAACC,GAAG,CAAC,mBAAmB,EAAEO,WAAW,CAAC;EAC/C;EAEAK,kBAAkBA,CAAA;IAChB,IAAI,IAAI,CAACzB,cAAc,IAAI,IAAI,CAACO,cAAc,CAACJ,IAAI,IAAI,IAAI,CAACI,cAAc,CAACF,IAAI,EAAE;MAC/E,MAAME,cAAc,GAAQ;QAC1BJ,IAAI,EAAE,IAAI,CAACI,cAAc,CAACJ,IAAI;QAC9BE,IAAI,EAAE,IAAI,CAACE,cAAc,CAACF,IAAI;QAC9BC,UAAU,EAAE,IAAI,CAACN,cAAc,CAAC0B;OACjC;MAED,IAAI,CAACxB,YAAY,CAACyB,IAAI,CAACpB,cAAc,CAAC;MACtCK,OAAO,CAACC,GAAG,CAAC,kBAAkB,EAAEN,cAAc,CAAC,CAAC,CAAC;MAEjD;MACA,IAAI,CAACA,cAAc,GAAG;QAAEJ,IAAI,EAAE,EAAE;QAAEE,IAAI,EAAE;MAAE,CAAE;MAC5C,IAAI,CAACL,cAAc,GAAG,IAAI;;EAE9B;CACD;AA1DYH,gBAAgB,GAAA+B,UAAA,EAL5BhC,SAAS,CAAC;EACTiC,QAAQ,EAAE,aAAa;EACvBC,WAAW,EAAE,0BAA0B;EACvCC,SAAS,EAAE,CAAC,yBAAyB;CACtC,CAAC,C,EACWlC,gBAAgB,CA0D5B"},"metadata":{},"sourceType":"module","externalDependencies":[]}