{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nexport let PatientComponent = class PatientComponent {\n  constructor(doctorService, route, patientService) {\n    this.doctorService = doctorService;\n    this.route = route;\n    this.patientService = patientService;\n    this.doctors = [];\n    this.appointments = [];\n    this.newAppointment = {\n      date: '',\n      time: ''\n    };\n    this.availableSlots = [];\n    this.editedAppointment = null;\n    this.selectedSlot = null;\n    this.selectedPatientId = null;\n    this.selectedSlotId = null;\n    this.loadDoctors();\n  }\n  loadDoctors() {\n    this.doctorService.getDoctors().subscribe(doctors => {\n      this.doctors = doctors;\n      console.log('Doctors:', this.doctors);\n    });\n  }\n  loadDoctorSlots() {\n    console.log(this.selectedDoctor);\n    if (this.selectedDoctor) {\n      this.doctorService.getDoctorSlots(this.selectedDoctor._id).subscribe(slots => {\n        this.availableSlots = slots;\n      });\n    }\n  }\n  cancelAppointment(appointment) {\n    const index = this.appointments.indexOf(appointment);\n    if (index !== -1) {\n      this.appointments.splice(index, 1);\n    }\n  }\n  editAppointment(appointment) {\n    this.editedAppointment = {\n      ...appointment\n    };\n    this.editedAppointment.time = this.formatTime(this.editedAppointment.time);\n  }\n  saveEditedAppointment() {\n    if (this.editedAppointment) {\n      this.editedAppointment.time = this.parseTimeString(this.editedAppointment.time);\n      const index = this.appointments.findIndex(appointment => appointment.id === this.editedAppointment.id);\n      if (index !== -1) {\n        this.appointments[index] = {\n          ...this.editedAppointment\n        };\n        this.editedAppointment = null;\n      }\n    }\n  }\n  formatTime(time) {\n    const options = {\n      hour: 'numeric',\n      minute: 'numeric',\n      hour12: true\n    };\n    return new Intl.DateTimeFormat('en-US', options).format(time);\n  }\n  parseTimeString(timeString) {\n    const [hoursStr, minutesStr] = timeString.split(':');\n    const hours = parseInt(hoursStr, 10);\n    const minutes = parseInt(minutesStr, 10);\n    if (isNaN(hours) || isNaN(minutes)) {\n      console.error('Invalid time format. Please enter a valid time.');\n      return null;\n    }\n    const date = new Date();\n    date.setHours(hours, minutes, 0, 0);\n    return date;\n  }\n  reserveAppointment() {\n    console.log(\"inside the reserve\");\n    if (this.selectedSlot && this.selectedPatientId) {\n      console.log(this.selectedSlot);\n      console.log(this.selectedPatientId);\n      // Call the backend SlotIDHandler to get the slot ID\n      this.doctorService.getSlotId(this.selectedSlot.date, this.selectedSlot.time, this.selectedDoctor.name).subscribe(response => {\n        // Assuming the response contains the slot ID\n        this.selectedSlotId = response.slotID;\n        // Now you can reserve the slot using the obtained slot ID and patient ID\n        this.patientService.reserveSlot(this.selectedSlotId, this.selectedPatientId).subscribe(reservationResponse => {\n          console.log('Slot reserved successfully:', reservationResponse);\n          // You may want to update your UI or perform other actions upon successful reservation.\n        }, reservationError => {\n          console.error('Error reserving slot:', reservationError);\n          // Handle errors gracefully, e.g., show an error message to the user.\n        });\n      }, error => {\n        console.error('Error getting slot ID:', error);\n        // Handle errors gracefully, e.g., show an error message to the user.\n      });\n    } else {\n      console.error('Selected slot or patient ID is missing.');\n      // Handle the case where the required information is missing.\n    }\n  }\n};\n\nPatientComponent = __decorate([Component({\n  selector: 'app-patient',\n  templateUrl: './patient.component.html',\n  styleUrls: ['./patient.component.css']\n})], PatientComponent);","map":{"version":3,"names":["Component","PatientComponent","constructor","doctorService","route","patientService","doctors","appointments","newAppointment","date","time","availableSlots","editedAppointment","selectedSlot","selectedPatientId","selectedSlotId","loadDoctors","getDoctors","subscribe","console","log","loadDoctorSlots","selectedDoctor","getDoctorSlots","_id","slots","cancelAppointment","appointment","index","indexOf","splice","editAppointment","formatTime","saveEditedAppointment","parseTimeString","findIndex","id","options","hour","minute","hour12","Intl","DateTimeFormat","format","timeString","hoursStr","minutesStr","split","hours","parseInt","minutes","isNaN","error","Date","setHours","reserveAppointment","getSlotId","name","response","slotID","reserveSlot","reservationResponse","reservationError","__decorate","selector","templateUrl","styleUrls"],"sources":["D:\\Year4\\Tools 3\\clinic-appointment-app\\src\\app\\patient\\patient.component.ts"],"sourcesContent":["import { Component } from '@angular/core';\nimport { DoctorService } from '../doctor/doctor.service';\nimport { PatientService } from './patient.service';\nimport { ActivatedRoute } from '@angular/router';\n\ninterface Doctor {\n  id: string;\n  name: string;\n}\n\ninterface Slot {\n  time: string;\n  date:string;\n  _id:string;\n}\n@Component({\n  selector: 'app-patient',\n  templateUrl: './patient.component.html',\n  styleUrls: ['./patient.component.css']\n})\nexport class PatientComponent {\n  selectedDoctor: any;\n  doctors: Doctor[] = [];\n  appointments: any[] = [];\n  newAppointment: { date: string, time: string, slot?: Slot } = { date: '', time: ''};\n  availableSlots: Slot[] = [];\n  editedAppointment: any | null = null;\n  selectedSlot: Slot | null = null;\n  selectedPatientId: string | null = null;\n  selectedSlotId: string | null = null;\n  \n  constructor(private doctorService: DoctorService , private route: ActivatedRoute,private patientService) {\n    this.loadDoctors();\n  }\nloadDoctors() {\n    this.doctorService.getDoctors().subscribe((doctors: Doctor[]) => {\n    this.doctors = doctors;\n    console.log('Doctors:', this.doctors); \n  });\n  }\n\nloadDoctorSlots() {\n    console.log(this.selectedDoctor)\n    if (this.selectedDoctor) {\n      this.doctorService.getDoctorSlots(this.selectedDoctor._id).subscribe((slots: Slot[]) => {\n        this.availableSlots = slots;\n      });\n    }\n  }\ncancelAppointment(appointment: any) {\n    const index = this.appointments.indexOf(appointment);\n    if (index !== -1) {\n      this.appointments.splice(index, 1);\n    }\n  }\n\neditAppointment(appointment: any) {\n  this.editedAppointment = { ...appointment };\n  this.editedAppointment.time = this.formatTime(this.editedAppointment.time);\n}\n\nsaveEditedAppointment() {\n  if (this.editedAppointment) {\n    this.editedAppointment.time = this.parseTimeString(this.editedAppointment.time);\n    const index = this.appointments.findIndex(appointment => appointment.id === this.editedAppointment.id);\n    if (index !== -1) {\n      this.appointments[index] = { ...this.editedAppointment };\n      this.editedAppointment = null; \n    }\n  }\n}\n\nformatTime(time: Date): string {\n  const options: Intl.DateTimeFormatOptions = { hour: 'numeric', minute: 'numeric', hour12: true };\n  return new Intl.DateTimeFormat('en-US', options).format(time);\n}\n\nprivate parseTimeString(timeString: string): Date | null {\n  const [hoursStr, minutesStr] = timeString.split(':');\n  const hours = parseInt(hoursStr, 10);\n  const minutes = parseInt(minutesStr, 10);\n\n  if (isNaN(hours) || isNaN(minutes)) {\n    console.error('Invalid time format. Please enter a valid time.');\n    return null;\n  }\n\n  const date = new Date();\n  date.setHours(hours, minutes, 0, 0);\n\n  return date;\n}\n\nreserveAppointment() {\n  console.log(\"inside the reserve\");\n  if (this.selectedSlot && this.selectedPatientId) {\n    console.log(this.selectedSlot);\n    console.log(this.selectedPatientId);\n    // Call the backend SlotIDHandler to get the slot ID\n    this.doctorService.getSlotId(this.selectedSlot.date, this.selectedSlot.time, this.selectedDoctor.name)\n      .subscribe(\n        (response: any) => {\n          // Assuming the response contains the slot ID\n          this.selectedSlotId = response.slotID;\n\n          // Now you can reserve the slot using the obtained slot ID and patient ID\n          this.patientService.reserveSlot(this.selectedSlotId, this.selectedPatientId)\n            .subscribe(\n              (reservationResponse: any) => {\n                console.log('Slot reserved successfully:', reservationResponse);\n                // You may want to update your UI or perform other actions upon successful reservation.\n              },\n              (reservationError: any) => {\n                console.error('Error reserving slot:', reservationError);\n                // Handle errors gracefully, e.g., show an error message to the user.\n              }\n            );\n        },\n        (error: any) => {\n          console.error('Error getting slot ID:', error);\n          // Handle errors gracefully, e.g., show an error message to the user.\n        }\n      );\n  } else {\n    console.error('Selected slot or patient ID is missing.');\n    // Handle the case where the required information is missing.\n  }\n}\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}